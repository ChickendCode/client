{"ast":null,"code":"// import createSlice and type definition\nimport { createSlice } from '@reduxjs/toolkit';\n// Define the initial state using that type\nconst initialState = {\n  isAuth: false\n};\nexport const authSlice = createSlice({\n  name: 'auth',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    setUser: (state, action) => ({\n      isAuth: true,\n      userInfo: action.payload\n    }),\n    clearUser: state => ({\n      isAuth: false\n    }),\n    updateAfterMatchFinish: (state, action) => ({ ...state,\n      userInfo: { ...state.userInfo,\n        ...action.payload\n      }\n    }) // Use the PayloadAction type to declare the contents of `action.payload`\n\n  }\n});\nexport const {\n  setUser,\n  clearUser,\n  updateAfterMatchFinish\n} = authSlice.actions; // Other code such as selectors can use the imported `RootState` type\n// export const selectCount = (state: RootState) => state.counter.value;\n\nexport default authSlice.reducer;","map":{"version":3,"sources":["E:/Freelancer/Github/caroPlay/client/src/store/auth/slice.ts"],"names":["createSlice","initialState","isAuth","authSlice","name","reducers","setUser","state","action","userInfo","payload","clearUser","updateAfterMatchFinish","actions","reducer"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA2C,kBAA3C;AAWA;AACA,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,MAAM,EAAE;AADsB,CAAhC;AAIA,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;AACnCI,EAAAA,IAAI,EAAE,MAD6B;AAEnC;AACAH,EAAAA,YAHmC;AAInCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,MAA6C;AACpDN,MAAAA,MAAM,EAAE,IAD4C;AAEpDO,MAAAA,QAAQ,EAAED,MAAM,CAACE;AAFmC,KAA7C,CADD;AAKRC,IAAAA,SAAS,EAAGJ,KAAD,KAAY;AACrBL,MAAAA,MAAM,EAAE;AADa,KAAZ,CALH;AAQRU,IAAAA,sBAAsB,EAAE,CACtBL,KADsB,EAEtBC,MAFsB,MAGlB,EACJ,GAAGD,KADC;AAEJE,MAAAA,QAAQ,EAAE,EACR,GAAGF,KAAK,CAACE,QADD;AAER,WAAGD,MAAM,CAACE;AAFF;AAFN,KAHkB,CARhB,CAkBR;;AAlBQ;AAJyB,CAAD,CAA7B;AA0BP,OAAO,MAAM;AAAEJ,EAAAA,OAAF;AAAWK,EAAAA,SAAX;AAAsBC,EAAAA;AAAtB,IAAiDT,SAAS,CAACU,OAAjE,C,CAEP;AACA;;AAEA,eAAeV,SAAS,CAACW,OAAzB","sourcesContent":["// import createSlice and type definition\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { userInfo } from 'os';\r\nimport type { RootState } from '../index';\r\nimport { UserInfo } from './interface';\r\n\r\n// Define a type for the slice state\r\ninterface AuthState {\r\n  isAuth: boolean;\r\n  userInfo?: UserInfo;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: AuthState = {\r\n  isAuth: false,\r\n};\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setUser: (state, action: PayloadAction<UserInfo>) => ({\r\n      isAuth: true,\r\n      userInfo: action.payload,\r\n    }),\r\n    clearUser: (state) => ({\r\n      isAuth: false,\r\n    }),\r\n    updateAfterMatchFinish: (\r\n      state,\r\n      action: PayloadAction<{ win: number; lose: number; username: string }>\r\n    ) => ({\r\n      ...state,\r\n      userInfo: {\r\n        ...state.userInfo,\r\n        ...action.payload,\r\n      },\r\n    }),\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n  },\r\n});\r\n\r\nexport const { setUser, clearUser, updateAfterMatchFinish } = authSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\n// export const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default authSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}