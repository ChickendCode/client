{"ast":null,"code":"var _jsxFileName = \"E:\\\\Freelancer\\\\Github\\\\caroPlay\\\\client\\\\src\\\\pages\\\\GreetingPage\\\\components\\\\Form\\\\index.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport { useAppDispatch } from '../../../../store/hook';\nimport { FormContainer, Form, FormTitle, FormInputSection, FormInputLabel, FormInputField, FormButton, FormLineBreak } from './FormComponents';\nimport { hide, showWithComponent } from '../../../../store/Modal/slice';\nimport { setUser } from '../../../../store/auth/slice';\nimport { httpAdapter } from '../../../../adapter/http-request';\nimport { ErrorModal } from '../../../../components/ErrorModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RegisterForm = () => {\n  _s();\n\n  const usernameRef = useRef(null);\n  const passwordRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [validationError, setValidationError] = useState({});\n  const [requestError, setRequestError] = useState();\n  const dispatch = useAppDispatch();\n\n  const handleSubmit = async event => {\n    var _usernameRef$current, _passwordRef$current;\n\n    event.preventDefault();\n    const username = (_usernameRef$current = usernameRef.current) === null || _usernameRef$current === void 0 ? void 0 : _usernameRef$current.value;\n    const password = (_passwordRef$current = passwordRef.current) === null || _passwordRef$current === void 0 ? void 0 : _passwordRef$current.value;\n\n    if (!username || !password) {\n      return setValidationError({\n        username: 'Enter username',\n        password: 'Enter password'\n      });\n    }\n\n    setIsLoading(true);\n    const {\n      data,\n      error\n    } = await httpAdapter.register(username, password);\n    setIsLoading(false);\n\n    if (error) {\n      // stay, only hide when close\n      // if (!error.status || error.status === 500) {\n      //   return dispatch(\n      //     showWithComponent(<ErrorModal errorMessage={error.message} />)\n      //   );\n      // }\n      // better display in form\n      return dispatch(showWithComponent( /*#__PURE__*/_jsxDEV(ErrorModal, {\n        errorMessage: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 27\n      }, this)));\n    }\n\n    if (data) {\n      // hide the modal and continue\n      dispatch(hide());\n      return dispatch(setUser({\n        username: data.username,\n        win: data.win,\n        lose: data.lose\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormContainer, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormTitle, {\n        children: \"Sign up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInputSection, {\n        children: [/*#__PURE__*/_jsxDEV(FormInputLabel, {\n          htmlFor: \"username\",\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormInputField, {\n          type: \"text\",\n          ref: usernameRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInputSection, {\n        children: [/*#__PURE__*/_jsxDEV(FormInputLabel, {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormInputField, {\n          type: \"password\",\n          ref: passwordRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormButton, {\n        type: \"submit\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormButton, {\n        type: \"button\",\n        onClick: () => {\n          dispatch(hide());\n        },\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterForm, \"lTrC5OSvWK3jfXf/oQhMlhbvjHQ=\", false, function () {\n  return [useAppDispatch];\n});\n\n_c = RegisterForm;\nexport const LoginForm = () => {\n  _s2();\n\n  const usernameRef = useRef(null);\n  const passwordRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [validationError, setValidationError] = useState({});\n  const [requestError, setRequestError] = useState();\n  const dispatch = useAppDispatch();\n\n  const handleSubmit = async event => {\n    var _usernameRef$current2, _passwordRef$current2;\n\n    event.preventDefault();\n    const username = (_usernameRef$current2 = usernameRef.current) === null || _usernameRef$current2 === void 0 ? void 0 : _usernameRef$current2.value;\n    const password = (_passwordRef$current2 = passwordRef.current) === null || _passwordRef$current2 === void 0 ? void 0 : _passwordRef$current2.value;\n\n    if (!username || !password) {\n      return setValidationError({\n        username: 'Enter username',\n        password: 'Enter password'\n      });\n    }\n\n    setIsLoading(true);\n    const {\n      data,\n      error\n    } = await httpAdapter.login(username, password);\n    setIsLoading(false);\n\n    if (error) {\n      // dispatch error state, just be general\n      return dispatch(showWithComponent( /*#__PURE__*/_jsxDEV(ErrorModal, {\n        errorMessage: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 27\n      }, this))); // if (!error.status || error.status === 500) {\n      //   return dispatch(showWithComponent(<div>{error.message}</div>));\n      //   return setRequestError('Internal server error');\n      // }\n      // return setRequestError(error.message);\n    }\n\n    if (data) {\n      return dispatch(setUser({\n        username: data.username,\n        win: data.win,\n        lose: data.lose\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormContainer, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormTitle, {\n        children: \"Log in and start playing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInputSection, {\n        children: [/*#__PURE__*/_jsxDEV(FormInputLabel, {\n          htmlFor: \"username\",\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormInputField, {\n          type: \"text\",\n          ref: usernameRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInputSection, {\n        children: [/*#__PURE__*/_jsxDEV(FormInputLabel, {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormInputField, {\n          type: \"password\",\n          ref: passwordRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormButton, {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormLineBreak, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormButton, {\n        type: \"button\",\n        onClick: () => {\n          dispatch(showWithComponent( /*#__PURE__*/_jsxDEV(RegisterForm, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 40\n          }, this)));\n        },\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(LoginForm, \"lTrC5OSvWK3jfXf/oQhMlhbvjHQ=\", false, function () {\n  return [useAppDispatch];\n});\n\n_c2 = LoginForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RegisterForm\");\n$RefreshReg$(_c2, \"LoginForm\");","map":{"version":3,"sources":["E:/Freelancer/Github/caroPlay/client/src/pages/GreetingPage/components/Form/index.tsx"],"names":["React","useState","useRef","useAppDispatch","FormContainer","Form","FormTitle","FormInputSection","FormInputLabel","FormInputField","FormButton","FormLineBreak","hide","showWithComponent","setUser","httpAdapter","ErrorModal","RegisterForm","usernameRef","passwordRef","isLoading","setIsLoading","validationError","setValidationError","requestError","setRequestError","dispatch","handleSubmit","event","preventDefault","username","current","value","password","data","error","register","message","win","lose","LoginForm","login"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { errorMonitor } from 'events';\r\nimport { useAppDispatch } from '../../../../store/hook';\r\nimport {\r\n  FormContainer,\r\n  Form,\r\n  FormTitle,\r\n  FormInputSection,\r\n  FormInputLabel,\r\n  FormInputField,\r\n  FormButton,\r\n  FormLink,\r\n  FormLinkContainer,\r\n  FormLineBreak,\r\n} from './FormComponents';\r\nimport { hide, showWithComponent } from '../../../../store/Modal/slice';\r\nimport { setUser } from '../../../../store/auth/slice';\r\nimport { httpAdapter } from '../../../../adapter/http-request';\r\nimport { ErrorModal } from '../../../../components/ErrorModal';\r\n\r\ninterface ValidationError {\r\n  username?: string;\r\n  password?: string;\r\n}\r\n\r\nconst RegisterForm = () => {\r\n  const usernameRef = useRef<HTMLInputElement>(null);\r\n  const passwordRef = useRef<HTMLInputElement>(null);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [validationError, setValidationError] = useState<ValidationError>({});\r\n  const [requestError, setRequestError] = useState<string | undefined>();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const username = usernameRef.current?.value;\r\n    const password = passwordRef.current?.value;\r\n    if (!username || !password) {\r\n      return setValidationError({\r\n        username: 'Enter username',\r\n        password: 'Enter password',\r\n      });\r\n    }\r\n    setIsLoading(true);\r\n    const { data, error } = await httpAdapter.register(username, password);\r\n    setIsLoading(false);\r\n    if (error) {\r\n      // stay, only hide when close\r\n      // if (!error.status || error.status === 500) {\r\n      //   return dispatch(\r\n      //     showWithComponent(<ErrorModal errorMessage={error.message} />)\r\n      //   );\r\n      // }\r\n      // better display in form\r\n      return dispatch(\r\n        showWithComponent(<ErrorModal errorMessage={error.message} />)\r\n      );\r\n    }\r\n    if (data) {\r\n      // hide the modal and continue\r\n      dispatch(hide());\r\n      return dispatch(\r\n        setUser({ username: data.username, win: data.win, lose: data.lose })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormContainer>\r\n      <Form onSubmit={handleSubmit}>\r\n        <FormTitle>Sign up</FormTitle>\r\n        <FormInputSection>\r\n          <FormInputLabel htmlFor=\"username\">Username</FormInputLabel>\r\n          <FormInputField type=\"text\" ref={usernameRef} />\r\n        </FormInputSection>\r\n        <FormInputSection>\r\n          <FormInputLabel htmlFor=\"password\">Password</FormInputLabel>\r\n          <FormInputField type=\"password\" ref={passwordRef} />\r\n        </FormInputSection>\r\n        <FormButton type=\"submit\">Register</FormButton>\r\n        <FormButton\r\n          type=\"button\"\r\n          onClick={() => {\r\n            dispatch(hide());\r\n          }}\r\n        >\r\n          Cancel\r\n        </FormButton>\r\n      </Form>\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport const LoginForm = () => {\r\n  const usernameRef = useRef<HTMLInputElement>(null);\r\n  const passwordRef = useRef<HTMLInputElement>(null);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [validationError, setValidationError] = useState<ValidationError>({});\r\n  const [requestError, setRequestError] = useState<string | undefined>();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const username = usernameRef.current?.value;\r\n    const password = passwordRef.current?.value;\r\n    if (!username || !password) {\r\n      return setValidationError({\r\n        username: 'Enter username',\r\n        password: 'Enter password',\r\n      });\r\n    }\r\n    setIsLoading(true);\r\n    const { data, error } = await httpAdapter.login(username, password);\r\n    setIsLoading(false);\r\n    if (error) {\r\n      // dispatch error state, just be general\r\n      return dispatch(\r\n        showWithComponent(<ErrorModal errorMessage={error.message} />)\r\n      );\r\n      // if (!error.status || error.status === 500) {\r\n      //   return dispatch(showWithComponent(<div>{error.message}</div>));\r\n      //   return setRequestError('Internal server error');\r\n      // }\r\n      // return setRequestError(error.message);\r\n    }\r\n    if (data) {\r\n      return dispatch(\r\n        setUser({ username: data.username, win: data.win, lose: data.lose })\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <FormContainer>\r\n      <Form onSubmit={handleSubmit}>\r\n        <FormTitle>Log in and start playing</FormTitle>\r\n        <FormInputSection>\r\n          <FormInputLabel htmlFor=\"username\">Username</FormInputLabel>\r\n          <FormInputField type=\"text\" ref={usernameRef} />\r\n        </FormInputSection>\r\n        <FormInputSection>\r\n          <FormInputLabel htmlFor=\"password\">Password</FormInputLabel>\r\n          <FormInputField type=\"password\" ref={passwordRef} />\r\n        </FormInputSection>\r\n        <FormButton type=\"submit\">Login</FormButton>\r\n        {/* <FormLinkContainer>\r\n          <FormLink to=\"password_recover\">Forgot password?</FormLink>\r\n        </FormLinkContainer> */}\r\n        <FormLineBreak />\r\n        <FormButton\r\n          type=\"button\"\r\n          onClick={() => {\r\n            dispatch(showWithComponent(<RegisterForm />));\r\n          }}\r\n        >\r\n          Register\r\n        </FormButton>\r\n      </Form>\r\n    </FormContainer>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}