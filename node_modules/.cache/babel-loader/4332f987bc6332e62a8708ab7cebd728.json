{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useAppSelector, useAppDispatch } from '../store/hook';\nimport { httpAdapter } from '../adapter/http-request';\nimport { setUser } from '../store/auth/slice';\nexport const useFetchInfo = () => {\n  _s();\n\n  const {\n    isAuth\n  } = useAppSelector(state => state.auth);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errorCode, setErrorCode] = useState();\n  const dispatch = useAppDispatch();\n\n  const fetchUserInfo = async () => {\n    if (!isAuth) {\n      try {\n        const {\n          data,\n          error\n        } = await httpAdapter.fetchUserInfo();\n        /**\r\n         * here we will have to check error to response\r\n         * error with 401 status will result in redirecting to login\r\n         * otherwise show error page (will be made later)\r\n         */\n\n        if (error) {\n          setIsLoading(false);\n          return setErrorCode(error.status);\n        }\n\n        if (data) {\n          setIsLoading(false);\n          dispatch(setUser({\n            username: data.username,\n            win: data.win,\n            lose: data.lose\n          }));\n        }\n      } catch (error) {\n        setIsLoading(false);\n        console.log(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchUserInfo();\n  }, []);\n  return {\n    isLoading,\n    errorCode,\n    isAuth\n  };\n};\n\n_s(useFetchInfo, \"44oDiySr2BXb2irJYOfnG3ZMNtw=\", false, function () {\n  return [useAppSelector, useAppDispatch];\n});","map":{"version":3,"sources":["E:/Freelancer/Github/caroPlay/client/src/hooks/useFetchInfo.ts"],"names":["useState","useEffect","useAppSelector","useAppDispatch","httpAdapter","setUser","useFetchInfo","isAuth","state","auth","isLoading","setIsLoading","errorCode","setErrorCode","dispatch","fetchUserInfo","data","error","status","username","win","lose","console","log"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,eAA/C;AAEA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,OAAT,QAAwB,qBAAxB;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAaL,cAAc,CAAEM,KAAD,IAAsBA,KAAK,CAACC,IAA7B,CAAjC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAU,IAAV,CAA1C;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,EAA1C;AACA,QAAMc,QAAQ,GAAGX,cAAc,EAA/B;;AAEA,QAAMY,aAAa,GAAG,YAAY;AAChC,QAAI,CAACR,MAAL,EAAa;AACX,UAAI;AACF,cAAM;AAAES,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAkB,MAAMb,WAAW,CAACW,aAAZ,EAA9B;AACA;AACR;AACA;AACA;AACA;;AACQ,YAAIE,KAAJ,EAAW;AACTN,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,iBAAOE,YAAY,CAACI,KAAK,CAACC,MAAP,CAAnB;AACD;;AACD,YAAIF,IAAJ,EAAU;AACRL,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAG,UAAAA,QAAQ,CACNT,OAAO,CAAC;AAAEc,YAAAA,QAAQ,EAAEH,IAAI,CAACG,QAAjB;AAA2BC,YAAAA,GAAG,EAAEJ,IAAI,CAACI,GAArC;AAA0CC,YAAAA,IAAI,EAAEL,IAAI,CAACK;AAArD,WAAD,CADD,CAAR;AAGD;AACF,OAjBD,CAiBE,OAAOJ,KAAP,EAAuB;AACvBN,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACD;AACF;AACF,GAxBD;;AA0BAhB,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;AAGA,SAAO;AAAEL,IAAAA,SAAF;AAAaE,IAAAA,SAAb;AAAwBL,IAAAA;AAAxB,GAAP;AACD,CApCM;;GAAMD,Y;UACQJ,c,EAGFC,c","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useAppSelector, useAppDispatch } from '../store/hook';\r\nimport { RootState } from '../store';\r\nimport { httpAdapter } from '../adapter/http-request';\r\nimport { setUser } from '../store/auth/slice';\r\n\r\nexport const useFetchInfo = () => {\r\n  const { isAuth } = useAppSelector((state: RootState) => state.auth);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [errorCode, setErrorCode] = useState<number | undefined>();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const fetchUserInfo = async () => {\r\n    if (!isAuth) {\r\n      try {\r\n        const { data, error } = await httpAdapter.fetchUserInfo();\r\n        /**\r\n         * here we will have to check error to response\r\n         * error with 401 status will result in redirecting to login\r\n         * otherwise show error page (will be made later)\r\n         */\r\n        if (error) {\r\n          setIsLoading(false);\r\n          return setErrorCode(error.status);\r\n        }\r\n        if (data) {\r\n          setIsLoading(false);\r\n          dispatch(\r\n            setUser({ username: data.username, win: data.win, lose: data.lose })\r\n          );\r\n        }\r\n      } catch (error: unknown) {\r\n        setIsLoading(false);\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchUserInfo();\r\n  }, []);\r\n  return { isLoading, errorCode, isAuth };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}