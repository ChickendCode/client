{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { authSlice } from './auth/slice';\nimport { chatSlice } from './chat/slice';\nimport { gameSlice } from './game/slice';\nimport { leaderBoardsSlice } from './leaderboards/slice';\nimport { modalSlide } from './Modal/slice';\nimport { socketSlice } from './socket/slice';\nimport { timerSlice } from './timer/slice'; // ...\n\nexport const store = configureStore({\n  reducer: {\n    modal: modalSlide.reducer,\n    auth: authSlice.reducer,\n    socket: socketSlice.reducer,\n    game: gameSlice.reducer,\n    timer: timerSlice.reducer,\n    chat: chatSlice.reducer,\n    leaderBoards: leaderBoardsSlice.reducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false\n  })\n}); // Infer the `RootState` and `AppDispatch` types from the store itself","map":{"version":3,"sources":["E:/Freelancer/Github/caroPlay/client/src/store/index.ts"],"names":["configureStore","authSlice","chatSlice","gameSlice","leaderBoardsSlice","modalSlide","socketSlice","timerSlice","store","reducer","modal","auth","socket","game","timer","chat","leaderBoards","middleware","getDefaultMiddleware","serializableCheck"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,UAAT,QAA2B,eAA3B,C,CACA;;AAEA,OAAO,MAAMC,KAAK,GAAGR,cAAc,CAAC;AAClCS,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAEL,UAAU,CAACI,OADX;AAEPE,IAAAA,IAAI,EAAEV,SAAS,CAACQ,OAFT;AAGPG,IAAAA,MAAM,EAAEN,WAAW,CAACG,OAHb;AAIPI,IAAAA,IAAI,EAAEV,SAAS,CAACM,OAJT;AAKPK,IAAAA,KAAK,EAAEP,UAAU,CAACE,OALX;AAMPM,IAAAA,IAAI,EAAEb,SAAS,CAACO,OANT;AAOPO,IAAAA,YAAY,EAAEZ,iBAAiB,CAACK;AAPzB,GADyB;AAUlCQ,EAAAA,UAAU,EAAGC,oBAAD,IACVA,oBAAoB,CAAC;AAAEC,IAAAA,iBAAiB,EAAE;AAArB,GAAD;AAXY,CAAD,CAA5B,C,CAcP","sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport { authSlice } from './auth/slice';\r\nimport { chatSlice } from './chat/slice';\r\nimport { gameSlice } from './game/slice';\r\nimport { leaderBoardsSlice } from './leaderboards/slice';\r\nimport { modalSlide } from './Modal/slice';\r\nimport { socketSlice } from './socket/slice';\r\nimport { timerSlice } from './timer/slice';\r\n// ...\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    modal: modalSlide.reducer,\r\n    auth: authSlice.reducer,\r\n    socket: socketSlice.reducer,\r\n    game: gameSlice.reducer,\r\n    timer: timerSlice.reducer,\r\n    chat: chatSlice.reducer,\r\n    leaderBoards: leaderBoardsSlice.reducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({ serializableCheck: false }),\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n"]},"metadata":{},"sourceType":"module"}