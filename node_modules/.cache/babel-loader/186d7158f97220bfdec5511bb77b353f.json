{"ast":null,"code":"// import createSlice and type definition\nimport { createSlice } from '@reduxjs/toolkit';\nconst maxStoreLength = 100; // Define the initial state using that type\n\nconst initialState = {\n  messages: []\n};\nexport const chatSlice = createSlice({\n  name: 'chat',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    addMessage: (state, action) => {\n      if (state.messages.length === maxStoreLength) {\n        state.messages.pop();\n      }\n\n      state.messages.unshift(action.payload);\n    } // Use the PayloadAction type to declare the contents of `action.payload`\n\n  }\n});\nexport const {\n  addMessage\n} = chatSlice.actions; // Other code such as selectors can use the imported `RootState` type\n// export const selectCount = (state: RootState) => state.counter.value;\n\nexport default chatSlice.reducer;","map":{"version":3,"sources":["E:/Freelancer/Github/caroPlay/client/src/store/chat/slice.ts"],"names":["createSlice","maxStoreLength","initialState","messages","chatSlice","name","reducers","addMessage","state","action","length","pop","unshift","payload","actions","reducer"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA2C,kBAA3C;AAUA,MAAMC,cAAc,GAAG,GAAvB,C,CAEA;;AACA,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,QAAQ,EAAE;AADoB,CAAhC;AAIA,OAAO,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AACnCK,EAAAA,IAAI,EAAE,MAD6B;AAEnC;AACAH,EAAAA,YAHmC;AAInCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA2C;AACrD,UAAID,KAAK,CAACL,QAAN,CAAeO,MAAf,KAA0BT,cAA9B,EAA8C;AAC5CO,QAAAA,KAAK,CAACL,QAAN,CAAeQ,GAAf;AACD;;AACDH,MAAAA,KAAK,CAACL,QAAN,CAAeS,OAAf,CAAuBH,MAAM,CAACI,OAA9B;AACD,KANO,CAOR;;AAPQ;AAJyB,CAAD,CAA7B;AAeP,OAAO,MAAM;AAAEN,EAAAA;AAAF,IAAiBH,SAAS,CAACU,OAAjC,C,CAEP;AACA;;AAEA,eAAeV,SAAS,CAACW,OAAzB","sourcesContent":["// import createSlice and type definition\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Message } from './interface';\r\n\r\n// define Message interface\r\n\r\n// Define a type for the slice state\r\ninterface ChatState {\r\n  messages: Message[];\r\n}\r\n\r\nconst maxStoreLength = 100;\r\n\r\n// Define the initial state using that type\r\nconst initialState: ChatState = {\r\n  messages: [],\r\n};\r\n\r\nexport const chatSlice = createSlice({\r\n  name: 'chat',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    addMessage: (state, action: PayloadAction<Message>) => {\r\n      if (state.messages.length === maxStoreLength) {\r\n        state.messages.pop();\r\n      }\r\n      state.messages.unshift(action.payload);\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n  },\r\n});\r\n\r\nexport const { addMessage } = chatSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\n// export const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default chatSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}