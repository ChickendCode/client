{"ast":null,"code":"import axios from 'axios';\n\n/**\r\n * create an axios instance\r\n */\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API || 'http://localhost:3000/',\n  withCredentials: true\n});\n/**\r\n * base method using for API calling, will be reuse in other API call\r\n * @param config axios request config type\r\n * @param T generic type use for typing response data\r\n * @returns a promise which will be resolve with an object type ResponseType<T>\r\n */\n\nconst request = async config => {\n  try {\n    const response = await axiosInstance.request(config);\n    return {\n      data: response.data\n    };\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      // here we only return error status if response status code is 4xx - 5xx\n      // the status code property will be used to check type of error later\n      if (error.response) {\n        var _responseError$respon;\n\n        const responseError = error;\n        return {\n          error: (_responseError$respon = responseError.response) === null || _responseError$respon === void 0 ? void 0 : _responseError$respon.data\n        };\n      }\n\n      if (error.request) {\n        return {\n          error: {\n            message: 'Internal server error'\n          }\n        };\n      }\n    }\n\n    return {\n      error: {\n        message: 'Internal server error'\n      }\n    };\n  }\n};\n\nconst login = async (username, password) => {\n  const result = await request({\n    url: '/auth/login',\n    method: 'POST',\n    data: {\n      username,\n      password\n    }\n  });\n  return result;\n};\n\nconst register = async (username, password) => {\n  const result = await request({\n    url: '/auth/register',\n    method: 'POST',\n    data: {\n      username,\n      password\n    }\n  });\n  return result;\n};\n\nconst logout = async () => {\n  const result = await request({\n    url: '/auth/refresh/logout',\n    method: 'GET'\n  });\n  return result;\n};\n\nconst silentRefresh = async () => {\n  const result = await request({\n    url: '/auth/refresh/',\n    method: 'GET'\n  });\n  return result;\n};\n\nconst fetchUserInfo = async () => {\n  const firstRequestResult = await request({\n    url: '/user',\n    method: 'GET'\n  });\n\n  if (firstRequestResult.error && firstRequestResult.error.status === 401) {\n    const silentRefreshResult = await silentRefresh();\n\n    if (silentRefreshResult.error) {\n      return {\n        error: silentRefreshResult.error\n      };\n    }\n\n    const secondRequestResult = await request({\n      url: '/user',\n      method: 'GET'\n    });\n    return secondRequestResult;\n  }\n\n  return firstRequestResult;\n};\n\nexport const httpAdapter = {\n  request,\n  login,\n  register,\n  logout,\n  fetchUserInfo\n};","map":{"version":3,"sources":["E:/Freelancer/Github/caroPlay/client/src/adapter/http-request.ts"],"names":["axios","axiosInstance","create","baseURL","process","env","REACT_APP_API","withCredentials","request","config","response","data","error","isAxiosError","responseError","message","login","username","password","result","url","method","register","logout","silentRefresh","fetchUserInfo","firstRequestResult","status","silentRefreshResult","secondRequestResult","httpAdapter"],"mappings":"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","sourcesContent":["import axios, {\r\n  AxiosInstance,\r\n  AxiosRequestConfig,\r\n  AxiosError,\r\n  AxiosResponse,\r\n  Axios,\r\n} from 'axios';\r\n\r\ninterface ResponseType<T> {\r\n  data?: T;\r\n  error?: ErrorType;\r\n}\r\n\r\ninterface ErrorType {\r\n  status?: number;\r\n  message?: string;\r\n}\r\n\r\ninterface LoginResponse {\r\n  username: string;\r\n  id: string;\r\n  win: number;\r\n  lose: number;\r\n}\r\n\r\ninterface RegisterResponse {\r\n  username: string;\r\n  id: string;\r\n  win: number;\r\n  lose: number;\r\n}\r\n\r\ninterface IUserInfo extends LoginResponse {}\r\n\r\ninterface ISilentRefreshResponse {\r\n  success: boolean;\r\n}\r\n\r\ninterface LogoutResponse {\r\n  success: boolean;\r\n}\r\n\r\n/**\r\n * create an axios instance\r\n */\r\nconst axiosInstance = axios.create({\r\n  baseURL: process.env.REACT_APP_API || 'http://localhost:3000/',\r\n  withCredentials: true,\r\n});\r\n\r\n/**\r\n * base method using for API calling, will be reuse in other API call\r\n * @param config axios request config type\r\n * @param T generic type use for typing response data\r\n * @returns a promise which will be resolve with an object type ResponseType<T>\r\n */\r\nconst request = async <T>(\r\n  config: AxiosRequestConfig\r\n): Promise<ResponseType<T>> => {\r\n  try {\r\n    const response = await axiosInstance.request<T>(config);\r\n    return { data: response.data };\r\n  } catch (error: any) {\r\n    if (axios.isAxiosError(error)) {\r\n      // here we only return error status if response status code is 4xx - 5xx\r\n      // the status code property will be used to check type of error later\r\n      if (error.response) {\r\n        const responseError = error as AxiosError<ErrorType>;\r\n        return {\r\n          error: responseError.response?.data,\r\n        };\r\n      }\r\n      if (error.request) {\r\n        return {\r\n          error: {\r\n            message: 'Internal server error',\r\n          },\r\n        };\r\n      }\r\n    }\r\n    return {\r\n      error: {\r\n        message: 'Internal server error',\r\n      },\r\n    };\r\n  }\r\n};\r\n\r\nconst login = async (username: string, password: string) => {\r\n  const result = await request<LoginResponse>({\r\n    url: '/auth/login',\r\n    method: 'POST',\r\n    data: {\r\n      username,\r\n      password,\r\n    },\r\n  });\r\n  return result;\r\n};\r\n\r\nconst register = async (username: string, password: string) => {\r\n  const result = await request<RegisterResponse>({\r\n    url: '/auth/register',\r\n    method: 'POST',\r\n    data: {\r\n      username,\r\n      password,\r\n    },\r\n  });\r\n  return result;\r\n};\r\n\r\nconst logout = async () => {\r\n  const result = await request<LogoutResponse>({\r\n    url: '/auth/refresh/logout',\r\n    method: 'GET',\r\n  });\r\n  return result;\r\n};\r\n\r\nconst silentRefresh = async () => {\r\n  const result = await request<ISilentRefreshResponse>({\r\n    url: '/auth/refresh/',\r\n    method: 'GET',\r\n  });\r\n  return result;\r\n};\r\n\r\nconst fetchUserInfo = async () => {\r\n  const firstRequestResult = await request<IUserInfo>({\r\n    url: '/user',\r\n    method: 'GET',\r\n  });\r\n  if (firstRequestResult.error && firstRequestResult.error.status === 401) {\r\n    const silentRefreshResult = await silentRefresh();\r\n    if (silentRefreshResult.error) {\r\n      return { error: silentRefreshResult.error };\r\n    }\r\n    const secondRequestResult = await request<IUserInfo>({\r\n      url: '/user',\r\n      method: 'GET',\r\n    });\r\n    return secondRequestResult;\r\n  }\r\n  return firstRequestResult;\r\n};\r\n\r\nexport const httpAdapter = {\r\n  request,\r\n  login,\r\n  register,\r\n  logout,\r\n  fetchUserInfo,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}