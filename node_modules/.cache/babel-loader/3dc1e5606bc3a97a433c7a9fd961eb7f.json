{"ast":null,"code":"var _jsxFileName = \"E:\\\\Freelancer\\\\Github\\\\caroPlay\\\\client\\\\src\\\\pages\\\\UserHomePage\\\\components\\\\MainBoard\\\\board_component\\\\currentRoom\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useAppDispatch, useAppSelector } from '../../../../../../store/hook';\nimport { setTimerAfterTick } from '../../../../../../store/timer/slice';\nimport { RoomInfoPanel } from './infoPanel';\nimport { GameBoard } from './playground/matchBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  /* padding: 10px 10px; */\n  /* border: 1px solid red; */\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  /* justify-content: space-between; */\n  height: 100%;\n  width: 100%;\n`;\n_c = Container;\nconst Left = styled.div`\n  /* padding: 5px 5px; */\n  /* border: 1px solid yellowgreen; */\n`;\n_c2 = Left;\nconst Playground = styled.div`\n  padding: 5px 5px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n_c3 = Playground;\nconst Right = styled.div`\n  padding: 5px 5px;\n  border-left: 1px solid black;\n  /* border: 1px solid blue; */\n  width: 70%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  /* justify-content: space-between; */\n\n  /* @media screen and (max-width: 1000px) {\n    display: none;\n  } */\n`;\n_c4 = Right;\nexport const CurrentRoom = ({\n  socket,\n  currentRoom\n}) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    matchStart: matchStartTimer,\n    matchMove: matchMoveTimer\n  } = useAppSelector(state => state.timer);\n  const currentMatch = useAppSelector(state => state.game.currentMatch);\n  useEffect(() => {\n    let matchStartInterval;\n\n    if (matchStartTimer.isActive) {\n      matchStartInterval = setInterval(() => {\n        dispatch(setTimerAfterTick('matchStart'));\n      }, 1000);\n    }\n\n    return () => {\n      if (matchStartInterval) clearInterval(matchStartInterval);\n    };\n  }, [matchStartTimer.isActive]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Left, {\n      children: /*#__PURE__*/_jsxDEV(Playground, {\n        children: matchStartTimer.isActive ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"The match will begin after \", matchStartTimer.remain, \" second\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this) : currentMatch && /*#__PURE__*/_jsxDEV(GameBoard, {\n          currentMatch: currentMatch,\n          socket: socket\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Right, {\n      children: /*#__PURE__*/_jsxDEV(RoomInfoPanel, {\n        currentRoom: currentRoom,\n        socket: socket\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CurrentRoom, \"zGvG5Ydv3mFudsrtFYouwHxY+AQ=\", false, function () {\n  return [useAppDispatch, useAppSelector, useAppSelector];\n});\n\n_c5 = CurrentRoom;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Left\");\n$RefreshReg$(_c3, \"Playground\");\n$RefreshReg$(_c4, \"Right\");\n$RefreshReg$(_c5, \"CurrentRoom\");","map":{"version":3,"sources":["E:/Freelancer/Github/caroPlay/client/src/pages/UserHomePage/components/MainBoard/board_component/currentRoom/index.tsx"],"names":["React","useEffect","styled","useAppDispatch","useAppSelector","setTimerAfterTick","RoomInfoPanel","GameBoard","Container","div","Left","Playground","Right","CurrentRoom","socket","currentRoom","dispatch","matchStart","matchStartTimer","matchMove","matchMoveTimer","state","timer","currentMatch","game","matchStartInterval","isActive","setInterval","clearInterval","remain"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AAGA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,8BAA/C;AACA,SAEEC,iBAFF,QAGO,qCAHP;AAIA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,SAAT,QAA0B,yBAA1B;;AAEA,MAAMC,SAAS,GAAGN,MAAM,CAACO,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;KAAMD,S;AAWN,MAAME,IAAI,GAAGR,MAAM,CAACO,GAAI;AACxB;AACA;AACA,CAHA;MAAMC,I;AAKN,MAAMC,UAAU,GAAGT,MAAM,CAACO,GAAI;AAC9B;AACA;AACA;AACA;AACA,CALA;MAAME,U;AAON,MAAMC,KAAK,GAAGV,MAAM,CAACO,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;MAAMG,K;AAoBN,OAAO,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAwC;AAAA;;AACjE,QAAMC,QAAQ,GAAGb,cAAc,EAA/B;AACA,QAAM;AAAEc,IAAAA,UAAU,EAAEC,eAAd;AAA+BC,IAAAA,SAAS,EAAEC;AAA1C,MACJhB,cAAc,CAAEiB,KAAD,IAAsBA,KAAK,CAACC,KAA7B,CADhB;AAEA,QAAMC,YAAY,GAAGnB,cAAc,CAChCiB,KAAD,IAAsBA,KAAK,CAACG,IAAN,CAAWD,YADA,CAAnC;AAIAtB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIwB,kBAAJ;;AACA,QAAIP,eAAe,CAACQ,QAApB,EAA8B;AAC5BD,MAAAA,kBAAkB,GAAGE,WAAW,CAAC,MAAM;AACrCX,QAAAA,QAAQ,CAACX,iBAAiB,CAAC,YAAD,CAAlB,CAAR;AACD,OAF+B,EAE7B,IAF6B,CAAhC;AAGD;;AACD,WAAO,MAAM;AACX,UAAIoB,kBAAJ,EAAwBG,aAAa,CAACH,kBAAD,CAAb;AACzB,KAFD;AAGD,GAVQ,EAUN,CAACP,eAAe,CAACQ,QAAjB,CAVM,CAAT;AAYA,sBACE,QAAC,SAAD;AAAA,4BACE,QAAC,IAAD;AAAA,6BACE,QAAC,UAAD;AAAA,kBACGR,eAAe,CAACQ,QAAhB,gBACC;AAAA,oDAC8BR,eAAe,CAACW,MAD9C;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,GAKCN,YAAY,iBACV,QAAC,SAAD;AAAW,UAAA,YAAY,EAAEA,YAAzB;AAAuC,UAAA,MAAM,EAAET;AAA/C;AAAA;AAAA;AAAA;AAAA;AAPN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAcE,QAAC,KAAD;AAAA,6BACE,QAAC,aAAD;AAAe,QAAA,WAAW,EAAEC,WAA5B;AAAyC,QAAA,MAAM,EAAED;AAAjD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAxCM;;GAAMD,W;UACMV,c,EAEfC,c,EACmBA,c;;;MAJVS,W","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Socket } from 'socket.io-client';\r\nimport styled from 'styled-components';\r\nimport { RootState } from '../../../../../../store';\r\nimport { ICurrentRoom } from '../../../../../../store/game/slice';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../../store/hook';\r\nimport {\r\n  setActiveTimer,\r\n  setTimerAfterTick,\r\n} from '../../../../../../store/timer/slice';\r\nimport { RoomInfoPanel } from './infoPanel';\r\nimport { GameBoard } from './playground/matchBoard';\r\n\r\nconst Container = styled.div`\r\n  /* padding: 10px 10px; */\r\n  /* border: 1px solid red; */\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  /* justify-content: space-between; */\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nconst Left = styled.div`\r\n  /* padding: 5px 5px; */\r\n  /* border: 1px solid yellowgreen; */\r\n`;\r\n\r\nconst Playground = styled.div`\r\n  padding: 5px 5px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Right = styled.div`\r\n  padding: 5px 5px;\r\n  border-left: 1px solid black;\r\n  /* border: 1px solid blue; */\r\n  width: 70%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  /* justify-content: space-between; */\r\n\r\n  /* @media screen and (max-width: 1000px) {\r\n    display: none;\r\n  } */\r\n`;\r\n\r\ninterface PropTypes {\r\n  socket?: Socket;\r\n  currentRoom: ICurrentRoom;\r\n}\r\n\r\nexport const CurrentRoom = ({ socket, currentRoom }: PropTypes) => {\r\n  const dispatch = useAppDispatch();\r\n  const { matchStart: matchStartTimer, matchMove: matchMoveTimer } =\r\n    useAppSelector((state: RootState) => state.timer);\r\n  const currentMatch = useAppSelector(\r\n    (state: RootState) => state.game.currentMatch\r\n  );\r\n\r\n  useEffect(() => {\r\n    let matchStartInterval: any;\r\n    if (matchStartTimer.isActive) {\r\n      matchStartInterval = setInterval(() => {\r\n        dispatch(setTimerAfterTick('matchStart'));\r\n      }, 1000);\r\n    }\r\n    return () => {\r\n      if (matchStartInterval) clearInterval(matchStartInterval);\r\n    };\r\n  }, [matchStartTimer.isActive]);\r\n\r\n  return (\r\n    <Container>\r\n      <Left>\r\n        <Playground>\r\n          {matchStartTimer.isActive ? (\r\n            <div>\r\n              The match will begin after {matchStartTimer.remain} second\r\n            </div>\r\n          ) : (\r\n            currentMatch && (\r\n              <GameBoard currentMatch={currentMatch} socket={socket} />\r\n            )\r\n          )}\r\n        </Playground>\r\n      </Left>\r\n      <Right>\r\n        <RoomInfoPanel currentRoom={currentRoom} socket={socket} />\r\n      </Right>\r\n    </Container>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}