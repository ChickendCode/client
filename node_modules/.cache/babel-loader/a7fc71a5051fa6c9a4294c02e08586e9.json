{"ast":null,"code":"// import createSlice and type definition\nimport { createSlice } from '@reduxjs/toolkit';\n// Define the initial state using that type\nconst initialState = {\n  matchStart: {\n    remain: 3,\n    isActive: false\n  },\n  matchMove: {\n    remain: 15,\n    isActive: false\n  },\n  matchFinish: {\n    remain: 5,\n    isActive: false\n  }\n};\nexport const timerSlice = createSlice({\n  name: 'timer',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    setActiveTimer: (state, action) => {\n      const {\n        type,\n        remain\n      } = action.payload;\n      state[type] = { ...initialState[type],\n        isActive: true,\n        remain\n      };\n    },\n    setTimerAfterTick: (state, action) => {\n      const type = action.payload; // state[type].remain -= 1;\n      // console.log(state[type].remain);\n\n      if (state[type].remain === 1) {\n        state[type].isActive = false;\n        return;\n      }\n\n      state[type].remain -= 1;\n    },\n    resetTimer: state => ({ ...initialState\n    })\n  }\n});\nexport const {\n  setActiveTimer,\n  setTimerAfterTick,\n  resetTimer\n} = timerSlice.actions; // Other code such as selectors can use the imported `RootState` type\n// export const selectCount = (state: RootState) => state.counter.value;\n\nexport default timerSlice.reducer;","map":{"version":3,"sources":["E:/Freelancer/Github/caroPlay/client/src/store/timer/slice.ts"],"names":["createSlice","initialState","matchStart","remain","isActive","matchMove","matchFinish","timerSlice","name","reducers","setActiveTimer","state","action","type","payload","setTimerAfterTick","resetTimer","actions","reducer"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA2C,kBAA3C;AAcA;AACA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,UAAU,EAAE;AACVC,IAAAA,MAAM,EAAE,CADE;AAEVC,IAAAA,QAAQ,EAAE;AAFA,GADmB;AAK/BC,EAAAA,SAAS,EAAE;AACTF,IAAAA,MAAM,EAAE,EADC;AAETC,IAAAA,QAAQ,EAAE;AAFD,GALoB;AAS/BE,EAAAA,WAAW,EAAE;AACXH,IAAAA,MAAM,EAAE,CADG;AAEXC,IAAAA,QAAQ,EAAE;AAFC;AATkB,CAAjC;AAeA,OAAO,MAAMG,UAAU,GAAGP,WAAW,CAAC;AACpCQ,EAAAA,IAAI,EAAE,OAD8B;AAEpC;AACAP,EAAAA,YAHoC;AAIpCQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,EAAE,CACdC,KADc,EAEdC,MAFc,KAMX;AACH,YAAM;AAAEC,QAAAA,IAAF;AAAQV,QAAAA;AAAR,UAAmBS,MAAM,CAACE,OAAhC;AACAH,MAAAA,KAAK,CAACE,IAAD,CAAL,GAAc,EAAE,GAAGZ,YAAY,CAACY,IAAD,CAAjB;AAAyBT,QAAAA,QAAQ,EAAE,IAAnC;AAAyCD,QAAAA;AAAzC,OAAd;AACD,KAVO;AAWRY,IAAAA,iBAAiB,EAAE,CACjBJ,KADiB,EAEjBC,MAFiB,KAGd;AACH,YAAMC,IAAI,GAAGD,MAAM,CAACE,OAApB,CADG,CAEH;AACA;;AACA,UAAIH,KAAK,CAACE,IAAD,CAAL,CAAYV,MAAZ,KAAuB,CAA3B,EAA8B;AAC5BQ,QAAAA,KAAK,CAACE,IAAD,CAAL,CAAYT,QAAZ,GAAuB,KAAvB;AACA;AACD;;AACDO,MAAAA,KAAK,CAACE,IAAD,CAAL,CAAYV,MAAZ,IAAsB,CAAtB;AACD,KAvBO;AAwBRa,IAAAA,UAAU,EAAGL,KAAD,KAAY,EACtB,GAAGV;AADmB,KAAZ;AAxBJ;AAJ0B,CAAD,CAA9B;AAkCP,OAAO,MAAM;AAAES,EAAAA,cAAF;AAAkBK,EAAAA,iBAAlB;AAAqCC,EAAAA;AAArC,IACXT,UAAU,CAACU,OADN,C,CAGP;AACA;;AAEA,eAAeV,UAAU,CAACW,OAA1B","sourcesContent":["// import createSlice and type definition\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport type { RootState } from '../index';\r\n\r\nexport interface TimerType {\r\n  remain: number;\r\n  isActive: boolean;\r\n}\r\n// Define a type for the slice state\r\ninterface TimerState {\r\n  matchStart: TimerType;\r\n  matchMove: TimerType;\r\n  matchFinish: TimerType;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: TimerState = {\r\n  matchStart: {\r\n    remain: 3,\r\n    isActive: false,\r\n  },\r\n  matchMove: {\r\n    remain: 15,\r\n    isActive: false,\r\n  },\r\n  matchFinish: {\r\n    remain: 5,\r\n    isActive: false,\r\n  },\r\n};\r\n\r\nexport const timerSlice = createSlice({\r\n  name: 'timer',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setActiveTimer: (\r\n      state,\r\n      action: PayloadAction<{\r\n        type: 'matchStart' | 'matchMove' | 'matchFinish';\r\n        remain: number;\r\n      }>\r\n    ) => {\r\n      const { type, remain } = action.payload;\r\n      state[type] = { ...initialState[type], isActive: true, remain };\r\n    },\r\n    setTimerAfterTick: (\r\n      state,\r\n      action: PayloadAction<'matchStart' | 'matchMove' | 'matchFinish'>\r\n    ) => {\r\n      const type = action.payload;\r\n      // state[type].remain -= 1;\r\n      // console.log(state[type].remain);\r\n      if (state[type].remain === 1) {\r\n        state[type].isActive = false;\r\n        return;\r\n      }\r\n      state[type].remain -= 1;\r\n    },\r\n    resetTimer: (state) => ({\r\n      ...initialState,\r\n    }),\r\n  },\r\n});\r\n\r\nexport const { setActiveTimer, setTimerAfterTick, resetTimer } =\r\n  timerSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\n// export const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default timerSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}