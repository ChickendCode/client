{"ast":null,"code":"// import createSlice and type definition\nimport { createSlice } from '@reduxjs/toolkit'; // Define a type for the slice state\n\n// Define the initial state using that type\nconst initialState = {\n  isShown: false\n};\nexport const modalSlide = createSlice({\n  name: 'modal',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    showWithComponent: (state, action) => ({\n      isShown: true,\n      component: action.payload\n    }),\n    hide: state => {\n      state.isShown = false;\n    } // Use the PayloadAction type to declare the contents of `action.payload`\n\n  }\n});\nexport const {\n  showWithComponent,\n  hide\n} = modalSlide.actions; // Other code such as selectors can use the imported `RootState` type\n// export const selectCount = (state: RootState) => state.counter.value;\n\nexport default modalSlide.reducer;","map":{"version":3,"sources":["E:/Freelancer/Github/caroPlay/client/src/store/Modal/slice.ts"],"names":["createSlice","initialState","isShown","modalSlide","name","reducers","showWithComponent","state","action","component","payload","hide","actions","reducer"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA2C,kBAA3C,C,CAEA;;AAMA;AACA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,OAAO,EAAE;AADsB,CAAjC;AAIA,OAAO,MAAMC,UAAU,GAAGH,WAAW,CAAC;AACpCI,EAAAA,IAAI,EAAE,OAD8B;AAEpC;AACAH,EAAAA,YAHoC;AAIpCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,MAAgD;AACjEN,MAAAA,OAAO,EAAE,IADwD;AAEjEO,MAAAA,SAAS,EAAED,MAAM,CAACE;AAF+C,KAAhD,CADX;AAKRC,IAAAA,IAAI,EAAGJ,KAAD,IAAW;AACfA,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,KAPO,CAQR;;AARQ;AAJ0B,CAAD,CAA9B;AAgBP,OAAO,MAAM;AAAEI,EAAAA,iBAAF;AAAqBK,EAAAA;AAArB,IAA8BR,UAAU,CAACS,OAA/C,C,CAEP;AACA;;AAEA,eAAeT,UAAU,CAACU,OAA1B","sourcesContent":["// import createSlice and type definition\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\n// Define a type for the slice state\r\ninterface ModalState {\r\n  isShown: boolean;\r\n  component?: JSX.Element;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: ModalState = {\r\n  isShown: false,\r\n};\r\n\r\nexport const modalSlide = createSlice({\r\n  name: 'modal',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    showWithComponent: (state, action: PayloadAction<JSX.Element>) => ({\r\n      isShown: true,\r\n      component: action.payload,\r\n    }),\r\n    hide: (state) => {\r\n      state.isShown = false;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n  },\r\n});\r\n\r\nexport const { showWithComponent, hide } = modalSlide.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\n// export const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default modalSlide.reducer;\r\n"]},"metadata":{},"sourceType":"module"}