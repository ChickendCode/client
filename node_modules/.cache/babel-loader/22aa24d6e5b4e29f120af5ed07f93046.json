{"ast":null,"code":"var _jsxFileName = \"E:\\\\Freelancer\\\\Github\\\\caroPlay\\\\client\\\\src\\\\pages\\\\UserHomePage\\\\components\\\\MainBoard\\\\board_component\\\\currentRoom\\\\playground\\\\matchBoard.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useAppDispatch } from '../../../../../../../store/hook';\nimport { GameSquare } from './square';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = styled.div`\n  /* border: 1px solid black; */\n  width: fit-content;\n\n  /* height: 100%; */\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n`;\n_c = Board;\nconst Column = styled.div`\n  height: 35px;\n  min-width: 500px;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n`;\n_c2 = Column;\nexport const GameBoard = ({\n  currentMatch,\n  socket\n}) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    matchMoves,\n    result\n  } = currentMatch;\n\n  const handleMove = (xIndex, yIndex) => {\n    if (matchMoves[xIndex][yIndex]) return;\n    socket === null || socket === void 0 ? void 0 : socket.emit('match_move', {\n      xIndex,\n      yIndex\n    }, success => {\n      if (!success) return false;\n    });\n  };\n\n  const gameBoard = matchMoves.map((column, colIndex) => {\n    const colKey = colIndex;\n    return /*#__PURE__*/_jsxDEV(Column, {\n      children: column.map((squareVal, squareIndex) => {\n        const squareKey = `${colKey},${squareIndex}`;\n        const isStreak = !!(result && result.streak && result.streak.find(streak => streak.xIndex === colIndex && streak.yIndex === squareIndex));\n        return /*#__PURE__*/_jsxDEV(GameSquare, {\n          xIndex: colIndex,\n          yIndex: squareIndex,\n          value: squareVal,\n          handleMove: handleMove,\n          isLastMove: currentMatch.lastMove ? currentMatch.lastMove.xIndex === colIndex && currentMatch.lastMove.yIndex === squareIndex : false,\n          isStreak: isStreak\n        }, squareKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this);\n      })\n    }, `column${colKey}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(Board, {\n    children: gameBoard\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 10\n  }, this);\n};\n\n_s(GameBoard, \"BJQ1DUn/XFEl2NsQ3DWyHAXfnkY=\", false, function () {\n  return [useAppDispatch];\n});\n\n_c3 = GameBoard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"Column\");\n$RefreshReg$(_c3, \"GameBoard\");","map":{"version":3,"sources":["E:/Freelancer/Github/caroPlay/client/src/pages/UserHomePage/components/MainBoard/board_component/currentRoom/playground/matchBoard.tsx"],"names":["React","styled","useAppDispatch","GameSquare","Board","div","Column","GameBoard","currentMatch","socket","dispatch","matchMoves","result","handleMove","xIndex","yIndex","emit","success","gameBoard","map","column","colIndex","colKey","squareVal","squareIndex","squareKey","isStreak","streak","find","lastMove"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AAKA,SAASC,cAAT,QAA+B,iCAA/B;AAEA,SAASC,UAAT,QAA2B,UAA3B;;AAEA,MAAMC,KAAK,GAAGH,MAAM,CAACI,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;KAAMD,K;AAWN,MAAME,MAAM,GAAGL,MAAM,CAACI,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA,CANA;MAAMC,M;AAaN,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAD,KAAyC;AAAA;;AAChE,QAAMC,QAAQ,GAAGR,cAAc,EAA/B;AACA,QAAM;AAAES,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAyBJ,YAA/B;;AAEA,QAAMK,UAAU,GAAG,CAACC,MAAD,EAAiBC,MAAjB,KAAoC;AACrD,QAAIJ,UAAU,CAACG,MAAD,CAAV,CAAmBC,MAAnB,CAAJ,EAAgC;AAChCN,IAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEO,IAAR,CAAa,YAAb,EAA2B;AAAEF,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAA3B,EAAgDE,OAAD,IAAsB;AACnE,UAAI,CAACA,OAAL,EAAc,OAAO,KAAP;AACf,KAFD;AAGD,GALD;;AAOA,QAAMC,SAAS,GAAGP,UAAU,CAACQ,GAAX,CAAe,CAACC,MAAD,EAASC,QAAT,KAAsB;AACrD,UAAMC,MAAM,GAAGD,QAAf;AACA,wBACE,QAAC,MAAD;AAAA,gBACGD,MAAM,CAACD,GAAP,CAAW,CAACI,SAAD,EAAYC,WAAZ,KAA4B;AACtC,cAAMC,SAAS,GAAI,GAAEH,MAAO,IAAGE,WAAY,EAA3C;AACA,cAAME,QAAQ,GAAG,CAAC,EAChBd,MAAM,IACNA,MAAM,CAACe,MADP,IAEAf,MAAM,CAACe,MAAP,CAAcC,IAAd,CACGD,MAAD,IACEA,MAAM,CAACb,MAAP,KAAkBO,QAAlB,IAA8BM,MAAM,CAACZ,MAAP,KAAkBS,WAFpD,CAHgB,CAAlB;AAQA,4BACE,QAAC,UAAD;AAEE,UAAA,MAAM,EAAEH,QAFV;AAGE,UAAA,MAAM,EAAEG,WAHV;AAIE,UAAA,KAAK,EAAED,SAJT;AAKE,UAAA,UAAU,EAAEV,UALd;AAME,UAAA,UAAU,EACRL,YAAY,CAACqB,QAAb,GACIrB,YAAY,CAACqB,QAAb,CAAsBf,MAAtB,KAAiCO,QAAjC,IACAb,YAAY,CAACqB,QAAb,CAAsBd,MAAtB,KAAiCS,WAFrC,GAGI,KAVR;AAYE,UAAA,QAAQ,EAAEE;AAZZ,WACOD,SADP;AAAA;AAAA;AAAA;AAAA,gBADF;AAgBD,OA1BA;AADH,OAAc,SAAQH,MAAO,EAA7B;AAAA;AAAA;AAAA;AAAA,YADF;AA+BD,GAjCiB,CAAlB;AAmCA,sBAAO,QAAC,KAAD;AAAA,cAAQJ;AAAR;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA/CM;;GAAMX,S;UACML,c;;;MADNK,S","sourcesContent":["import React from 'react';\r\nimport { Socket } from 'socket.io-client';\r\nimport styled from 'styled-components';\r\nimport {\r\n  MatchState,\r\n  setMatchStateAfterMove,\r\n} from '../../../../../../../store/game/slice';\r\nimport { useAppDispatch } from '../../../../../../../store/hook';\r\nimport { OnGoingMatch } from '../../../interface/room.interface';\r\nimport { GameSquare } from './square';\r\n\r\nconst Board = styled.div`\r\n  /* border: 1px solid black; */\r\n  width: fit-content;\r\n\r\n  /* height: 100%; */\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n`;\r\n\r\nconst Column = styled.div`\r\n  height: 35px;\r\n  min-width: 500px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n`;\r\n\r\ninterface PropTypes {\r\n  currentMatch: OnGoingMatch;\r\n  socket?: Socket;\r\n}\r\n\r\nexport const GameBoard = ({ currentMatch, socket }: PropTypes) => {\r\n  const dispatch = useAppDispatch();\r\n  const { matchMoves, result } = currentMatch;\r\n\r\n  const handleMove = (xIndex: number, yIndex: number) => {\r\n    if (matchMoves[xIndex][yIndex]) return;\r\n    socket?.emit('match_move', { xIndex, yIndex }, (success: boolean) => {\r\n      if (!success) return false;\r\n    });\r\n  };\r\n\r\n  const gameBoard = matchMoves.map((column, colIndex) => {\r\n    const colKey = colIndex;\r\n    return (\r\n      <Column key={`column${colKey}`}>\r\n        {column.map((squareVal, squareIndex) => {\r\n          const squareKey = `${colKey},${squareIndex}`;\r\n          const isStreak = !!(\r\n            result &&\r\n            result.streak &&\r\n            result.streak.find(\r\n              (streak) =>\r\n                streak.xIndex === colIndex && streak.yIndex === squareIndex\r\n            )\r\n          );\r\n          return (\r\n            <GameSquare\r\n              key={squareKey}\r\n              xIndex={colIndex}\r\n              yIndex={squareIndex}\r\n              value={squareVal}\r\n              handleMove={handleMove}\r\n              isLastMove={\r\n                currentMatch.lastMove\r\n                  ? currentMatch.lastMove.xIndex === colIndex &&\r\n                    currentMatch.lastMove.yIndex === squareIndex\r\n                  : false\r\n              }\r\n              isStreak={isStreak}\r\n            />\r\n          );\r\n        })}\r\n      </Column>\r\n    );\r\n  });\r\n\r\n  return <Board>{gameBoard}</Board>;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}