{"ast":null,"code":"// import createSlice and type definition\nimport { createSlice } from '@reduxjs/toolkit';\n// Define the initial state using that type\nconst initialState = {\n  chat: undefined,\n  game: undefined,\n  logger: undefined\n};\nexport const socketSlice = createSlice({\n  name: 'socket',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    setSocketInstance: (state, action) => ({ ...state,\n      [action.payload.ioType]: action.payload.ioInstance\n    }) // clearSocketInstance: (state) => ({\n    //   chat\n    // }),\n    // Use the PayloadAction type to declare the contents of `action.payload`\n\n  }\n});\nexport const {\n  setSocketInstance\n} = socketSlice.actions; // Other code such as selectors can use the imported `RootState` type\n// export const selectCount = (state: RootState) => state.counter.value;\n\nexport default socketSlice.reducer;","map":{"version":3,"sources":["E:/Freelancer/Github/caroPlay/client/src/store/socket/slice.ts"],"names":["createSlice","initialState","chat","undefined","game","logger","socketSlice","name","reducers","setSocketInstance","state","action","payload","ioType","ioInstance","actions","reducer"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA2C,kBAA3C;AAeA;AACA,MAAMC,YAAyB,GAAG;AAChCC,EAAAA,IAAI,EAAEC,SAD0B;AAEhCC,EAAAA,IAAI,EAAED,SAF0B;AAGhCE,EAAAA,MAAM,EAAEF;AAHwB,CAAlC;AAMA,OAAO,MAAMG,WAAW,GAAGN,WAAW,CAAC;AACrCO,EAAAA,IAAI,EAAE,QAD+B;AAErC;AACAN,EAAAA,YAHqC;AAIrCO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,iBAAiB,EAAE,CACjBC,KADiB,EAEjBC,MAFiB,MAGb,EACJ,GAAGD,KADC;AAEJ,OAACC,MAAM,CAACC,OAAP,CAAeC,MAAhB,GAAyBF,MAAM,CAACC,OAAP,CAAeE;AAFpC,KAHa,CADX,CAQR;AACA;AACA;AACA;;AAXQ;AAJ2B,CAAD,CAA/B;AAmBP,OAAO,MAAM;AAAEL,EAAAA;AAAF,IAAwBH,WAAW,CAACS,OAA1C,C,CAEP;AACA;;AAEA,eAAeT,WAAW,CAACU,OAA3B","sourcesContent":["// import createSlice and type definition\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { WritableDraft } from '@reduxjs/toolkit/node_modules/immer/dist/internal';\r\nimport { Socket } from 'socket.io-client';\r\nimport { DefaultEventsMap } from 'socket.io-client/build/typed-events';\r\nimport type { RootState } from '../index';\r\nimport { IOType } from './ioType';\r\n\r\n// Define a type for the slice state\r\ninterface SocketState {\r\n  // [x: string]: Socket | undefined;\r\n  chat?: Socket;\r\n  game?: Socket;\r\n  logger?: Socket;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: SocketState = {\r\n  chat: undefined,\r\n  game: undefined,\r\n  logger: undefined,\r\n};\r\n\r\nexport const socketSlice = createSlice({\r\n  name: 'socket',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setSocketInstance: (\r\n      state,\r\n      action: PayloadAction<{ ioType: IOType; ioInstance: Socket }>\r\n    ) => ({\r\n      ...state,\r\n      [action.payload.ioType]: action.payload.ioInstance,\r\n    }),\r\n    // clearSocketInstance: (state) => ({\r\n    //   chat\r\n    // }),\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n  },\r\n});\r\n\r\nexport const { setSocketInstance } = socketSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\n// export const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default socketSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}