{"ast":null,"code":"// import createSlice and type definition\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = [];\nexport const leaderBoardsSlice = createSlice({\n  name: 'leaderBoards',\n  initialState,\n  reducers: {\n    setLeaderBoards: (state, action) => [...action.payload]\n  }\n});\nexport const {\n  setLeaderBoards\n} = leaderBoardsSlice.actions; // Other code such as selectors can use the imported `RootState` type\n// export const selectCount = (state: RootState) => state.counter.value;\n\nexport default leaderBoardsSlice.reducer;","map":{"version":3,"sources":["E:/Freelancer/Github/caroPlay/client/src/store/leaderboards/slice.ts"],"names":["createSlice","initialState","leaderBoardsSlice","name","reducers","setLeaderBoards","state","action","payload","actions","reducer"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA2C,kBAA3C;AAGA,MAAMC,YAA4B,GAAG,EAArC;AAEA,OAAO,MAAMC,iBAAiB,GAAGF,WAAW,CAAC;AAC3CG,EAAAA,IAAI,EAAE,cADqC;AAE3CF,EAAAA,YAF2C;AAG3CG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAkD,CACjE,GAAGA,MAAM,CAACC,OADuD;AAD3D;AAHiC,CAAD,CAArC;AAUP,OAAO,MAAM;AAAEH,EAAAA;AAAF,IAAsBH,iBAAiB,CAACO,OAA9C,C,CAEP;AACA;;AAEA,eAAeP,iBAAiB,CAACQ,OAAjC","sourcesContent":["// import createSlice and type definition\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { ILeaderBoard } from '../../interface';\r\n\r\nconst initialState: ILeaderBoard[] = [];\r\n\r\nexport const leaderBoardsSlice = createSlice({\r\n  name: 'leaderBoards',\r\n  initialState,\r\n  reducers: {\r\n    setLeaderBoards: (state, action: PayloadAction<ILeaderBoard[]>) => [\r\n      ...action.payload,\r\n    ],\r\n  },\r\n});\r\n\r\nexport const { setLeaderBoards } = leaderBoardsSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\n// export const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default leaderBoardsSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}