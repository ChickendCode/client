[{"E:\\Freelancer\\Github\\caroPlay\\client\\src\\index.tsx":"1","E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\index.ts":"2","E:\\Freelancer\\Github\\caroPlay\\client\\src\\App.tsx":"3","E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\auth\\slice.ts":"4","E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\chat\\slice.ts":"5","E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\game\\slice.ts":"6","E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\Modal\\slice.ts":"7","E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\socket\\slice.ts":"8","E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\leaderboards\\slice.ts":"9","E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\timer\\slice.ts":"10","E:\\Freelancer\\Github\\caroPlay\\client\\src\\appRouter.tsx":"11","E:\\Freelancer\\Github\\caroPlay\\client\\src\\hooks\\useFetchInfo.ts":"12","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\Home\\index.tsx":"13","E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\hook.ts":"14","E:\\Freelancer\\Github\\caroPlay\\client\\src\\adapter\\http-request.ts":"15","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\NotFound\\index.tsx":"16","E:\\Freelancer\\Github\\caroPlay\\client\\src\\containers\\Modal\\index.tsx":"17","E:\\Freelancer\\Github\\caroPlay\\client\\src\\containers\\NavBar\\index.tsx":"18","E:\\Freelancer\\Github\\caroPlay\\client\\src\\containers\\Modal\\ModalElements.tsx":"19","E:\\Freelancer\\Github\\caroPlay\\client\\src\\containers\\NavBar\\NavBarElement.tsx":"20","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\GreetingPage\\index.tsx":"21","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\index.tsx":"22","E:\\Freelancer\\Github\\caroPlay\\client\\src\\components\\ErrorModal\\index.tsx":"23","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\GreetingPage\\HomePageElement.tsx":"24","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\elementIndex.tsx":"25","E:\\Freelancer\\Github\\caroPlay\\client\\src\\hooks\\useSocket.tsx":"26","E:\\Freelancer\\Github\\caroPlay\\client\\src\\components\\ErrorModal\\element.ts":"27","E:\\Freelancer\\Github\\caroPlay\\client\\src\\helpers\\socketHelper.ts":"28","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\GreetingPage\\components\\Form\\index.tsx":"29","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\UserBriefInfo\\index.tsx":"30","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\GlobalChat\\index.tsx":"31","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\index.tsx":"32","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\GreetingPage\\components\\Form\\FormComponents.tsx":"33","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\UserBriefInfo\\elements.tsx":"34","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\GlobalChat\\elements.tsx":"35","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\elements.tsx":"36","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\board_component\\currentRoom\\index.tsx":"37","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\board_component\\createRoom\\createRoom.tsx":"38","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\board_component\\roomList\\roomList.tsx":"39","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\board_component\\currentRoom\\playground\\matchBoard.tsx":"40","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\board_component\\roomList\\roomCard.tsx":"41","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\board_component\\currentRoom\\infoPanel\\index.tsx":"42","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\board_component\\currentRoom\\playground\\square.tsx":"43"},{"size":337,"mtime":1654925253063,"results":"44","hashOfConfig":"45"},{"size":1050,"mtime":1654925253078,"results":"46","hashOfConfig":"45"},{"size":195,"mtime":1654925253032,"results":"47","hashOfConfig":"45"},{"size":1398,"mtime":1654925253078,"results":"48","hashOfConfig":"45"},{"size":1110,"mtime":1654925253078,"results":"49","hashOfConfig":"45"},{"size":3913,"mtime":1654925253078,"results":"50","hashOfConfig":"45"},{"size":1043,"mtime":1654925253078,"results":"51","hashOfConfig":"45"},{"size":1489,"mtime":1654925253078,"results":"52","hashOfConfig":"45"},{"size":683,"mtime":1654925253078,"results":"53","hashOfConfig":"45"},{"size":1849,"mtime":1654925253078,"results":"54","hashOfConfig":"45"},{"size":1257,"mtime":1654925253032,"results":"55","hashOfConfig":"45"},{"size":1399,"mtime":1654925253063,"results":"56","hashOfConfig":"45"},{"size":368,"mtime":1654925253063,"results":"57","hashOfConfig":"45"},{"size":356,"mtime":1654925253078,"results":"58","hashOfConfig":"45"},{"size":3413,"mtime":1654925253032,"results":"59","hashOfConfig":"45"},{"size":130,"mtime":1654925253063,"results":"60","hashOfConfig":"45"},{"size":1020,"mtime":1654925253063,"results":"61","hashOfConfig":"45"},{"size":2547,"mtime":1654925253063,"results":"62","hashOfConfig":"45"},{"size":1021,"mtime":1654925253063,"results":"63","hashOfConfig":"45"},{"size":2857,"mtime":1654925253063,"results":"64","hashOfConfig":"45"},{"size":690,"mtime":1654925253063,"results":"65","hashOfConfig":"45"},{"size":926,"mtime":1654925253078,"results":"66","hashOfConfig":"45"},{"size":304,"mtime":1654925253063,"results":"67","hashOfConfig":"45"},{"size":1172,"mtime":1654925253063,"results":"68","hashOfConfig":"45"},{"size":771,"mtime":1654925253078,"results":"69","hashOfConfig":"45"},{"size":6893,"mtime":1655916970603,"results":"70","hashOfConfig":"45"},{"size":550,"mtime":1654925253063,"results":"71","hashOfConfig":"45"},{"size":452,"mtime":1654925253063,"results":"72","hashOfConfig":"45"},{"size":5443,"mtime":1654925253063,"results":"73","hashOfConfig":"45"},{"size":701,"mtime":1654925253078,"results":"74","hashOfConfig":"45"},{"size":3867,"mtime":1654925253063,"results":"75","hashOfConfig":"45"},{"size":983,"mtime":1654925253078,"results":"76","hashOfConfig":"45"},{"size":2142,"mtime":1654925253063,"results":"77","hashOfConfig":"45"},{"size":755,"mtime":1654925253078,"results":"78","hashOfConfig":"45"},{"size":4009,"mtime":1654925253063,"results":"79","hashOfConfig":"45"},{"size":2016,"mtime":1654925253078,"results":"80","hashOfConfig":"45"},{"size":2618,"mtime":1654925253063,"results":"81","hashOfConfig":"45"},{"size":3740,"mtime":1654925253063,"results":"82","hashOfConfig":"45"},{"size":2446,"mtime":1654925253078,"results":"83","hashOfConfig":"45"},{"size":2338,"mtime":1655916976211,"results":"84","hashOfConfig":"45"},{"size":2941,"mtime":1654925253078,"results":"85","hashOfConfig":"45"},{"size":7912,"mtime":1654925253078,"results":"86","hashOfConfig":"45"},{"size":1756,"mtime":1654925253078,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fpaa97",{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199"},"E:\\Freelancer\\Github\\caroPlay\\client\\src\\index.tsx",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\index.ts",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\App.tsx",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\auth\\slice.ts",["200","201"],"// import createSlice and type definition\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { userInfo } from 'os';\r\nimport type { RootState } from '../index';\r\nimport { UserInfo } from './interface';\r\n\r\n// Define a type for the slice state\r\ninterface AuthState {\r\n  isAuth: boolean;\r\n  userInfo?: UserInfo;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: AuthState = {\r\n  isAuth: false,\r\n};\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setUser: (state, action: PayloadAction<UserInfo>) => ({\r\n      isAuth: true,\r\n      userInfo: action.payload,\r\n    }),\r\n    clearUser: (state) => ({\r\n      isAuth: false,\r\n    }),\r\n    updateAfterMatchFinish: (\r\n      state,\r\n      action: PayloadAction<{ win: number; lose: number; username: string }>\r\n    ) => ({\r\n      ...state,\r\n      userInfo: {\r\n        ...state.userInfo,\r\n        ...action.payload,\r\n      },\r\n    }),\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n  },\r\n});\r\n\r\nexport const { setUser, clearUser, updateAfterMatchFinish } = authSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\n// export const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default authSlice.reducer;\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\chat\\slice.ts",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\game\\slice.ts",["202","203"],"// import createSlice and type definition\r\nimport { createSlice, PayloadAction, current } from '@reduxjs/toolkit';\r\nimport {\r\n  OnGoingMatch,\r\n  Player,\r\n  Room,\r\n  Viewer,\r\n} from '../../pages/UserHomePage/components/MainBoard/interface/room.interface';\r\nimport type { RootState } from '../index';\r\n// import { UserInfo } from './interface';\r\n\r\nexport interface ICurrentRoom {\r\n  room: Room;\r\n  me: Viewer | Player;\r\n}\r\n\r\n// Define a type for the slice state\r\ninterface GameState {\r\n  roomList: Room[];\r\n  currentRoom?: ICurrentRoom;\r\n  currentMatch?: OnGoingMatch;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: GameState = {\r\n  roomList: [],\r\n};\r\n\r\ninterface RoomChange {\r\n  room: Room;\r\n  // type: 'new_room' | 'remove_room' | 'room_change';\r\n  type: string;\r\n}\r\n\r\nexport interface Move {\r\n  xIndex: number;\r\n  yIndex: number;\r\n}\r\n\r\nexport interface MatchState {\r\n  matchMoves: (1 | 2 | null)[][];\r\n  nextTurn: 1 | 2;\r\n}\r\n\r\nexport const gameSlice = createSlice({\r\n  name: 'game',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setRoomList: (state, action: PayloadAction<Room[]>) => ({\r\n      ...state,\r\n      roomList: action.payload,\r\n    }),\r\n    setRoomListAfterChange: (state, action: PayloadAction<RoomChange>) => {\r\n      const { room, type } = action.payload;\r\n      switch (type) {\r\n        case 'new_room':\r\n          state.roomList.push(room);\r\n          break;\r\n        case 'remove_room':\r\n          const index1 = state.roomList.findIndex(\r\n            (roomData) => roomData.name === room.name\r\n          );\r\n          if (index1 >= 0) {\r\n            state.roomList.splice(index1, 1);\r\n          }\r\n          break;\r\n        case 'change':\r\n          const index2 = state.roomList.findIndex(\r\n            (roomData) => roomData.name === room.name\r\n          );\r\n          if (index2 >= 0) {\r\n            state.roomList[index2] = room;\r\n          }\r\n          break;\r\n        default:\r\n        // console.log(room);\r\n        // console.log(type);\r\n      }\r\n    },\r\n    setCurrentRoom: (state, action: PayloadAction<ICurrentRoom>) =>\r\n      // const\r\n      ({\r\n        ...state,\r\n        currentRoom: action.payload,\r\n      }),\r\n    clearCurrentRoom: (state) =>\r\n      // const\r\n      ({\r\n        ...state,\r\n        currentRoom: undefined,\r\n      }),\r\n    setMatchState: (state, action: PayloadAction<OnGoingMatch | undefined>) => {\r\n      state.currentMatch = action.payload;\r\n    },\r\n    setMatchStateAfterMove: (state, action: PayloadAction<Move>) => {\r\n      const { xIndex, yIndex } = action.payload;\r\n      const currentMatchState: OnGoingMatch | undefined = JSON.parse(\r\n        JSON.stringify(state.currentMatch)\r\n      );\r\n      if (!currentMatchState) return;\r\n      currentMatchState.matchMoves[xIndex][yIndex] = currentMatchState.nextTurn;\r\n      currentMatchState.nextTurn = currentMatchState.nextTurn === 1 ? 2 : 1;\r\n      currentMatchState.lastMove = { xIndex, yIndex };\r\n      state.currentMatch = currentMatchState;\r\n    },\r\n    setMatchResult: (\r\n      state,\r\n      action: PayloadAction<{ winner: 1 | 2; streak: Move[]; reason?: string }>\r\n    ) => {\r\n      const currentMatchState: OnGoingMatch | undefined = JSON.parse(\r\n        JSON.stringify(state.currentMatch)\r\n      );\r\n      if (!currentMatchState) return;\r\n      currentMatchState.result = action.payload;\r\n      state.currentMatch = currentMatchState;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n  },\r\n});\r\n\r\nexport const {\r\n  setRoomList,\r\n  setRoomListAfterChange,\r\n  setCurrentRoom,\r\n  setMatchState,\r\n  setMatchStateAfterMove,\r\n  setMatchResult,\r\n  clearCurrentRoom,\r\n} = gameSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\n// export const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default gameSlice.reducer;\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\Modal\\slice.ts",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\socket\\slice.ts",["204","205","206"],"// import createSlice and type definition\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { WritableDraft } from '@reduxjs/toolkit/node_modules/immer/dist/internal';\r\nimport { Socket } from 'socket.io-client';\r\nimport { DefaultEventsMap } from 'socket.io-client/build/typed-events';\r\nimport type { RootState } from '../index';\r\nimport { IOType } from './ioType';\r\n\r\n// Define a type for the slice state\r\ninterface SocketState {\r\n  // [x: string]: Socket | undefined;\r\n  chat?: Socket;\r\n  game?: Socket;\r\n  logger?: Socket;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: SocketState = {\r\n  chat: undefined,\r\n  game: undefined,\r\n  logger: undefined,\r\n};\r\n\r\nexport const socketSlice = createSlice({\r\n  name: 'socket',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setSocketInstance: (\r\n      state,\r\n      action: PayloadAction<{ ioType: IOType; ioInstance: Socket }>\r\n    ) => ({\r\n      ...state,\r\n      [action.payload.ioType]: action.payload.ioInstance,\r\n    }),\r\n    // clearSocketInstance: (state) => ({\r\n    //   chat\r\n    // }),\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n  },\r\n});\r\n\r\nexport const { setSocketInstance } = socketSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\n// export const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default socketSlice.reducer;\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\leaderboards\\slice.ts",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\timer\\slice.ts",["207"],"// import createSlice and type definition\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport type { RootState } from '../index';\r\n\r\nexport interface TimerType {\r\n  remain: number;\r\n  isActive: boolean;\r\n}\r\n// Define a type for the slice state\r\ninterface TimerState {\r\n  matchStart: TimerType;\r\n  matchMove: TimerType;\r\n  matchFinish: TimerType;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: TimerState = {\r\n  matchStart: {\r\n    remain: 3,\r\n    isActive: false,\r\n  },\r\n  matchMove: {\r\n    remain: 15,\r\n    isActive: false,\r\n  },\r\n  matchFinish: {\r\n    remain: 5,\r\n    isActive: false,\r\n  },\r\n};\r\n\r\nexport const timerSlice = createSlice({\r\n  name: 'timer',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setActiveTimer: (\r\n      state,\r\n      action: PayloadAction<{\r\n        type: 'matchStart' | 'matchMove' | 'matchFinish';\r\n        remain: number;\r\n      }>\r\n    ) => {\r\n      const { type, remain } = action.payload;\r\n      state[type] = { ...initialState[type], isActive: true, remain };\r\n    },\r\n    setTimerAfterTick: (\r\n      state,\r\n      action: PayloadAction<'matchStart' | 'matchMove' | 'matchFinish'>\r\n    ) => {\r\n      const type = action.payload;\r\n      // state[type].remain -= 1;\r\n      // console.log(state[type].remain);\r\n      if (state[type].remain === 1) {\r\n        state[type].isActive = false;\r\n        return;\r\n      }\r\n      state[type].remain -= 1;\r\n    },\r\n    resetTimer: (state) => ({\r\n      ...initialState,\r\n    }),\r\n  },\r\n});\r\n\r\nexport const { setActiveTimer, setTimerAfterTick, resetTimer } =\r\n  timerSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\n// export const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default timerSlice.reducer;\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\appRouter.tsx",["208","209"],"import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from 'react-router-dom';\r\nimport NavBar from './containers/NavBar';\r\nimport UserPage from './pages/User';\r\nimport NotFound from './pages/NotFound';\r\nimport PrivateRoute from './helpers/PrivateRoute';\r\nimport { RootModal } from './containers/Modal';\r\nimport { Home } from './pages/Home/index';\r\nimport { useFetchInfo } from './hooks/useFetchInfo';\r\n\r\nexport const AppRouter = () => {\r\n  const { isLoading, errorCode } = useFetchInfo();\r\n  if (isLoading) return <div>Loading</div>;\r\n  if (errorCode && errorCode !== 401) {\r\n    // console.log(errorCode);\r\n    return <div>Oops, server error</div>;\r\n  }\r\n  return (\r\n    <Router>\r\n      <NavBar />\r\n      <RootModal />\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <Home />\r\n        </Route>\r\n        <Route path=\"/login\">\r\n          <Redirect to=\"/\" />\r\n        </Route>\r\n        {/* <PrivateRoute\r\n              path=\"/me\"\r\n              conditionalFn={() => !!isAuth}\r\n              redirectPath=\"/login\"\r\n            >\r\n              <UserPage />\r\n            </PrivateRoute> */}\r\n        <Route path=\"*\">\r\n          <NotFound />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\hooks\\useFetchInfo.ts",["210"],"import { useState, useEffect } from 'react';\r\nimport { useAppSelector, useAppDispatch } from '../store/hook';\r\nimport { RootState } from '../store';\r\nimport { httpAdapter } from '../adapter/http-request';\r\nimport { setUser } from '../store/auth/slice';\r\n\r\nexport const useFetchInfo = () => {\r\n  const { isAuth } = useAppSelector((state: RootState) => state.auth);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [errorCode, setErrorCode] = useState<number | undefined>();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const fetchUserInfo = async () => {\r\n    if (!isAuth) {\r\n      try {\r\n        const { data, error } = await httpAdapter.fetchUserInfo();\r\n        /**\r\n         * here we will have to check error to response\r\n         * error with 401 status will result in redirecting to login\r\n         * otherwise show error page (will be made later)\r\n         */\r\n        if (error) {\r\n          setIsLoading(false);\r\n          return setErrorCode(error.status);\r\n        }\r\n        if (data) {\r\n          setIsLoading(false);\r\n          dispatch(\r\n            setUser({ username: data.username, win: data.win, lose: data.lose })\r\n          );\r\n        }\r\n      } catch (error: unknown) {\r\n        setIsLoading(false);\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchUserInfo();\r\n  }, []);\r\n  return { isLoading, errorCode, isAuth };\r\n};\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\Home\\index.tsx",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\store\\hook.ts",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\adapter\\http-request.ts",["211","212","213"],"import axios, {\r\n  AxiosInstance,\r\n  AxiosRequestConfig,\r\n  AxiosError,\r\n  AxiosResponse,\r\n  Axios,\r\n} from 'axios';\r\n\r\ninterface ResponseType<T> {\r\n  data?: T;\r\n  error?: ErrorType;\r\n}\r\n\r\ninterface ErrorType {\r\n  status?: number;\r\n  message?: string;\r\n}\r\n\r\ninterface LoginResponse {\r\n  username: string;\r\n  id: string;\r\n  win: number;\r\n  lose: number;\r\n}\r\n\r\ninterface RegisterResponse {\r\n  username: string;\r\n  id: string;\r\n  win: number;\r\n  lose: number;\r\n}\r\n\r\ninterface IUserInfo extends LoginResponse {}\r\n\r\ninterface ISilentRefreshResponse {\r\n  success: boolean;\r\n}\r\n\r\ninterface LogoutResponse {\r\n  success: boolean;\r\n}\r\n\r\n/**\r\n * create an axios instance\r\n */\r\nconst axiosInstance = axios.create({\r\n  baseURL: process.env.REACT_APP_API || 'http://localhost:3000/',\r\n  withCredentials: true,\r\n});\r\n\r\n/**\r\n * base method using for API calling, will be reuse in other API call\r\n * @param config axios request config type\r\n * @param T generic type use for typing response data\r\n * @returns a promise which will be resolve with an object type ResponseType<T>\r\n */\r\nconst request = async <T>(\r\n  config: AxiosRequestConfig\r\n): Promise<ResponseType<T>> => {\r\n  try {\r\n    const response = await axiosInstance.request<T>(config);\r\n    return { data: response.data };\r\n  } catch (error: any) {\r\n    if (axios.isAxiosError(error)) {\r\n      // here we only return error status if response status code is 4xx - 5xx\r\n      // the status code property will be used to check type of error later\r\n      if (error.response) {\r\n        const responseError = error as AxiosError<ErrorType>;\r\n        return {\r\n          error: responseError.response?.data,\r\n        };\r\n      }\r\n      if (error.request) {\r\n        return {\r\n          error: {\r\n            message: 'Internal server error',\r\n          },\r\n        };\r\n      }\r\n    }\r\n    return {\r\n      error: {\r\n        message: 'Internal server error',\r\n      },\r\n    };\r\n  }\r\n};\r\n\r\nconst login = async (username: string, password: string) => {\r\n  const result = await request<LoginResponse>({\r\n    url: '/auth/login',\r\n    method: 'POST',\r\n    data: {\r\n      username,\r\n      password,\r\n    },\r\n  });\r\n  return result;\r\n};\r\n\r\nconst register = async (username: string, password: string) => {\r\n  const result = await request<RegisterResponse>({\r\n    url: '/auth/register',\r\n    method: 'POST',\r\n    data: {\r\n      username,\r\n      password,\r\n    },\r\n  });\r\n  return result;\r\n};\r\n\r\nconst logout = async () => {\r\n  const result = await request<LogoutResponse>({\r\n    url: '/auth/refresh/logout',\r\n    method: 'GET',\r\n  });\r\n  return result;\r\n};\r\n\r\nconst silentRefresh = async () => {\r\n  const result = await request<ISilentRefreshResponse>({\r\n    url: '/auth/refresh/',\r\n    method: 'GET',\r\n  });\r\n  return result;\r\n};\r\n\r\nconst fetchUserInfo = async () => {\r\n  const firstRequestResult = await request<IUserInfo>({\r\n    url: '/user',\r\n    method: 'GET',\r\n  });\r\n  if (firstRequestResult.error && firstRequestResult.error.status === 401) {\r\n    const silentRefreshResult = await silentRefresh();\r\n    if (silentRefreshResult.error) {\r\n      return { error: silentRefreshResult.error };\r\n    }\r\n    const secondRequestResult = await request<IUserInfo>({\r\n      url: '/user',\r\n      method: 'GET',\r\n    });\r\n    return secondRequestResult;\r\n  }\r\n  return firstRequestResult;\r\n};\r\n\r\nexport const httpAdapter = {\r\n  request,\r\n  login,\r\n  register,\r\n  logout,\r\n  fetchUserInfo,\r\n};\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\NotFound\\index.tsx",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\containers\\Modal\\index.tsx",["214"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { RootState } from '../../store';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hook';\r\nimport { hide, showWithComponent } from '../../store/Modal/slice';\r\nimport {\r\n  Overlay,\r\n  Modal,\r\n  ModalHeader,\r\n  CloseButton,\r\n  None,\r\n} from './ModalElements';\r\n\r\nexport const RootModal = () => {\r\n  const modalRoot = document.getElementById('modal-root') as HTMLElement;\r\n  const { isShown, component } = useAppSelector(\r\n    (state: RootState) => state.modal\r\n  );\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  return !isShown ? (\r\n    <None />\r\n  ) : (\r\n    ReactDOM.createPortal(\r\n      <>\r\n        <Overlay />\r\n        <Modal>\r\n          <ModalHeader>\r\n            <CloseButton\r\n              onClick={() => {\r\n                dispatch(hide());\r\n              }}\r\n            >\r\n              X\r\n            </CloseButton>\r\n          </ModalHeader>\r\n          {component}\r\n        </Modal>\r\n      </>,\r\n      modalRoot\r\n    )\r\n  );\r\n};\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\containers\\NavBar\\index.tsx",["215","216"],"import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {\r\n  Nav,\r\n  NavbarContainer,\r\n  NavLogo,\r\n  UserSection,\r\n  UserAvatar,\r\n  UserInfo,\r\n  UserInfoLink,\r\n  UserInfoContainer,\r\n  NavMenu,\r\n  NavMenuItem,\r\n  NavMenuLink,\r\n  UserAccount,\r\n  Dropdown,\r\n} from './NavBarElement';\r\nimport avatar from '../../assets/profile.jpg';\r\nimport dropdown from '../../assets/dropdown.png';\r\nimport withCondition from '../../hoc/withCondition';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hook';\r\nimport { RootState } from '../../store';\r\nimport { httpAdapter } from '../../adapter/http-request';\r\nimport { clearUser } from '../../store/auth/slice';\r\nimport { showWithComponent } from '../../store/Modal/slice';\r\nimport { ErrorModal } from '../../components/ErrorModal';\r\n\r\nconst NavBar = (): JSX.Element => {\r\n  const { isAuth, userInfo } = useAppSelector((state: RootState) => state.auth);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleLogout = async () => {\r\n    const { data, error } = await httpAdapter.logout();\r\n    if (error) {\r\n      dispatch(showWithComponent(<ErrorModal errorMessage={error.message} />));\r\n    }\r\n    if (data) {\r\n      if (data.success) dispatch(clearUser());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Nav>\r\n      <NavbarContainer>\r\n        <NavLogo to=\"/\">WeGomoku</NavLogo>\r\n        {isAuth && (\r\n          <>\r\n            <NavMenu>\r\n              <NavMenuItem>\r\n                <NavMenuLink to=\"/\">Home</NavMenuLink>\r\n              </NavMenuItem>\r\n              {/* <NavMenuItem>\r\n                <NavMenuLink to=\"/leaderboard\">Leaderboard</NavMenuLink>\r\n              </NavMenuItem> */}\r\n              <NavMenuItem>\r\n                <NavMenuLink to=\"/tournament\">Tournament</NavMenuLink>\r\n              </NavMenuItem>\r\n              <NavMenuItem>\r\n                <NavMenuLink to=\"/about\">About</NavMenuLink>\r\n              </NavMenuItem>\r\n            </NavMenu>\r\n            <UserSection>\r\n              <UserInfoLink to=\"/me\">\r\n                <UserInfoContainer>\r\n                  <UserAvatar src={avatar} />\r\n                  <UserInfo>{userInfo?.username}</UserInfo>\r\n                </UserInfoContainer>\r\n              </UserInfoLink>\r\n              {/* this will be drop down later, now just make it a logout button */}\r\n              <UserAccount>\r\n                <Dropdown src={dropdown} onClick={handleLogout} />\r\n              </UserAccount>\r\n            </UserSection>\r\n          </>\r\n        )}\r\n      </NavbarContainer>\r\n    </Nav>\r\n  );\r\n};\r\nexport default NavBar;\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\containers\\Modal\\ModalElements.tsx",["217"],"import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const Modal = styled.div`\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: fit-content;\r\n  height: fit-content;\r\n  transform: translate(-50%, -50%);\r\n  /* padding: 100px; */\r\n  z-index: 1000;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  background: #0e0b0b;\r\n  border-radius: 20px;\r\n`;\r\n\r\nexport const Overlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  background-color: rgba(146, 125, 125, 0.8);\r\n  z-index: 100;\r\n`;\r\n\r\nexport const ModalHeader = styled.div`\r\n  padding: 2px 3px;\r\n  width: 100%;\r\n  display: flex;\r\n  direction: rtl;\r\n`;\r\n\r\nexport const CloseButton = styled.button`\r\n  font-size: 25px;\r\n  font-weight: bold;\r\n  margin-right: 10px;\r\n  margin-top: 10px;\r\n  width: 10px;\r\n  /* background: 0b0b; */\r\n  background: #0e0b0b;\r\n  color: white;\r\n  border: none;\r\n`;\r\n\r\nexport const None = styled.div`\r\n  display: none;\r\n`;\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\containers\\NavBar\\NavBarElement.tsx",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\GreetingPage\\index.tsx",["218","219","220"],"import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { RootModal } from '../../containers/Modal';\r\nimport {\r\n  Bg,\r\n  Container,\r\n  Left,\r\n  Information,\r\n  InnerContainer,\r\n  Right,\r\n} from './HomePageElement';\r\nimport { LoginForm } from './components/Form';\r\n\r\nconst GreetingPage = (): JSX.Element => (\r\n  <Container>\r\n    <Bg />\r\n    <InnerContainer>\r\n      <Left>\r\n        <Information>Join us and wreak havoc</Information>\r\n      </Left>\r\n      <Right>\r\n        <LoginForm />\r\n      </Right>\r\n    </InnerContainer>\r\n    {/* <RootModal isOpen={isOpen} toggleClose={() => setIsOpen(false)} /> */}\r\n  </Container>\r\n);\r\n\r\nexport default GreetingPage;\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\index.tsx",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\components\\ErrorModal\\index.tsx",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\GreetingPage\\HomePageElement.tsx",["221"],"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport landingBg from '../../assets/bg.jpg';\r\n\r\nexport const Container = styled.div`\r\n  position: relative;\r\n  height: 100%;\r\n  width: 100%;\r\n  z-index: 3;\r\n`;\r\n\r\nexport const Bg = styled.div`\r\n  background-image: url(${landingBg});\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  height: 100%;\r\n  margin-top: -10px;\r\n  /* z-index: 10; */\r\n  filter: blur(8px);\r\n`;\r\n\r\nexport const InnerContainer = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  padding: 60px 10%;\r\n  opacity: 1;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  @media screen and (max-width: 1000px) {\r\n    flex-direction: column;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nexport const Left = styled.div`\r\n  @media screen and (max-width: 1000px) {\r\n    text-align: center;\r\n    height: 150px;\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n\r\nexport const Information = styled.div`\r\n  font-size: 40px;\r\n  color: #ffffff;\r\n  font-weight: bold;\r\n  max-height: 60px;\r\n`;\r\n\r\nexport const Right = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\elementIndex.tsx",["222"],"import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const OuterContainer = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 5px 10px 5px;\r\n  z-index: 3;\r\n  height: 92%;\r\n`;\r\n\r\nexport const Left = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const TopLeft = styled.div`\r\n  padding: 3px 5px;\r\n  height: fit-content;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const BottomLeft = styled.div`\r\n  padding: 2px 5px;\r\n  height: 100%;\r\n`;\r\n\r\nexport const Right = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 450px;\r\n`;\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\hooks\\useSocket.tsx",["223","224","225","226"],"import { useState, useEffect } from 'react';\r\nimport io, { Socket } from 'socket.io-client';\r\nimport { stat } from 'fs';\r\nimport { useAppDispatch, useAppSelector } from '../store/hook';\r\nimport { IOType } from '../store/socket/ioType';\r\nimport {\r\n  OnGoingMatch,\r\n  Room,\r\n} from '../pages/UserHomePage/components/MainBoard/interface/room.interface';\r\nimport {\r\n  clearCurrentRoom,\r\n  MatchState,\r\n  Move,\r\n  setCurrentRoom,\r\n  setMatchResult,\r\n  setMatchState,\r\n  setMatchStateAfterMove,\r\n  setRoomList,\r\n  setRoomListAfterChange,\r\n} from '../store/game/slice';\r\nimport { ILeaderBoard, RetrieveCurrentRoom } from '../interface';\r\nimport { RootState } from '../store';\r\nimport { socketHelper } from '../helpers/socketHelper';\r\nimport { resetTimer, setActiveTimer } from '../store/timer/slice';\r\nimport { Message } from '../store/chat/interface';\r\nimport { addMessage } from '../store/chat/slice';\r\nimport { updateAfterMatchFinish } from '../store/auth/slice';\r\nimport { setLeaderBoards } from '../store/leaderboards/slice';\r\nimport { setSocketInstance } from '../store/socket/slice';\r\n\r\n/**\r\n * Custom hook use to establish a websocket connection to server and register\r\n * event listener to it\r\n * @param ioType\r\n * @returns\r\n */\r\nexport const useSocket = (ioType: IOType) => {\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [errorMessage, setErrorMessage] = useState<string | undefined>();\r\n  const [socket, setSocket] = useState<Socket | undefined>();\r\n  const me = useAppSelector((state: RootState) => state.auth.userInfo);\r\n  const myRoom = useAppSelector((state: RootState) => state.game.currentRoom);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const getIOConnection = () => {\r\n    try {\r\n      const ioInstance = io(\r\n        `${process.env.REACT_APP_API || 'http://localhost:3000'}/game`,\r\n        { withCredentials: true }\r\n      );\r\n      ioInstance.on('connect_error', () => {\r\n        console.log('connect error');\r\n        setErrorMessage(\r\n          'Cant connect to server, trying to establish connection'\r\n        );\r\n        dispatch(setRoomList([]));\r\n        dispatch(clearCurrentRoom());\r\n        dispatch(setMatchState(undefined));\r\n        dispatch(resetTimer());\r\n      });\r\n      ioInstance.on('connect', () => {\r\n        console.log('connected');\r\n        setIsLoading(false);\r\n        setErrorMessage(undefined);\r\n        dispatch(setSocketInstance({ ioType, ioInstance }));\r\n      });\r\n      ioInstance.on('disconnect', () => {\r\n        console.log('disconnected');\r\n        setErrorMessage('Oops, something wrong');\r\n        dispatch(setRoomList([]));\r\n        dispatch(clearCurrentRoom());\r\n        dispatch(setMatchState(undefined));\r\n        dispatch(resetTimer());\r\n      });\r\n\r\n      ioInstance.on('connect_accept', () => {\r\n        ioInstance.emit('fetch_rooms', (fetchedRoomList: Room[]) => {\r\n          dispatch(setRoomList(fetchedRoomList));\r\n          ioInstance.emit(\r\n            'retrieve_current_room',\r\n            ({ success, data: room }: RetrieveCurrentRoom) => {\r\n              if (!success) return;\r\n              const myRole = socketHelper.getMyRole(me, room);\r\n              if (!myRole) return;\r\n              dispatch(setCurrentRoom({ room, me: myRole }));\r\n              if (room.onGoingMatch) {\r\n                dispatch(setMatchState(room.onGoingMatch));\r\n                if (room.onGoingMatch.timeout) {\r\n                  dispatch(setActiveTimer(room.onGoingMatch.timeout));\r\n                }\r\n              }\r\n            }\r\n          );\r\n        });\r\n      });\r\n\r\n      ioInstance.on('room_change', (room: Room, type: string) => {\r\n        dispatch(setRoomListAfterChange({ room, type }));\r\n      });\r\n\r\n      ioInstance.on('room_member_change', (room: Room) => {\r\n        const myRole = socketHelper.getMyRole(me, room);\r\n        if (!myRole) return;\r\n        dispatch(setCurrentRoom({ room, me: myRole }));\r\n      });\r\n\r\n      ioInstance.on('sync_join', (room: Room) => {\r\n        const myRole = socketHelper.getMyRole(me, room);\r\n        if (!myRole) return;\r\n        dispatch(setCurrentRoom({ room, me: myRole }));\r\n        if (room.onGoingMatch) {\r\n          dispatch(setMatchState(room.onGoingMatch));\r\n          if (room.onGoingMatch.timeout) {\r\n            dispatch(setActiveTimer(room.onGoingMatch.timeout));\r\n          }\r\n        }\r\n      });\r\n\r\n      ioInstance.on('match_move', (xIndex: number, yIndex: number) => {\r\n        dispatch(setMatchStateAfterMove({ xIndex, yIndex }));\r\n        dispatch(setActiveTimer({ type: 'matchMove', remain: 15 }));\r\n      });\r\n\r\n      ioInstance.on('match_start', (matchStartState: OnGoingMatch) => {\r\n        dispatch(setActiveTimer({ type: 'matchStart', remain: 3 }));\r\n        dispatch(setMatchState(matchStartState));\r\n      });\r\n\r\n      ioInstance.on('match_start_cancel', () => {\r\n        dispatch(setMatchState(undefined));\r\n        dispatch(resetTimer());\r\n      });\r\n\r\n      ioInstance.on('match_start_count', (matchStartState: OnGoingMatch) => {\r\n        dispatch(setActiveTimer({ type: 'matchMove', remain: 15 }));\r\n        dispatch(setMatchState(matchStartState));\r\n      });\r\n\r\n      ioInstance.on(\r\n        'match_result',\r\n        (matchResult: { winner: 1 | 2; streak: Move[]; reason?: string }) => {\r\n          dispatch(setMatchResult(matchResult));\r\n          dispatch(resetTimer());\r\n          dispatch(setActiveTimer({ type: 'matchFinish', remain: 5 }));\r\n        }\r\n      );\r\n\r\n      ioInstance.on('match_finish', (room: Room) => {\r\n        dispatch(setMatchState(undefined));\r\n        dispatch(resetTimer());\r\n        const myRole = socketHelper.getMyRole(me, room);\r\n        if (!myRole) return;\r\n        dispatch(setCurrentRoom({ room, me: myRole }));\r\n      });\r\n\r\n      ioInstance.on('leave_room', () => {\r\n        dispatch(clearCurrentRoom());\r\n        dispatch(setMatchState(undefined));\r\n        dispatch(resetTimer());\r\n      });\r\n\r\n      ioInstance.on('global_chat', (message: Message) => {\r\n        dispatch(addMessage({ ...message }));\r\n      });\r\n\r\n      ioInstance.on(\r\n        'update_after_match',\r\n        (info: { win: number; lose: number; username: string }) => {\r\n          dispatch(updateAfterMatchFinish(info));\r\n        }\r\n      );\r\n\r\n      ioInstance.on('leaderBoard', (leaderBoard: ILeaderBoard[]) => {\r\n        dispatch(setLeaderBoards(leaderBoard));\r\n      });\r\n\r\n      return ioInstance;\r\n    } catch (error: any) {\r\n      console.trace(error);\r\n      // setHasError(true);\r\n    }\r\n    // setIsLoading(false); // fix here\r\n  };\r\n\r\n  useEffect(() => {\r\n    const ioInstance = getIOConnection();\r\n    setSocket(ioInstance);\r\n    return () => {\r\n      ioInstance?.disconnect();\r\n      dispatch(setRoomList([]));\r\n      dispatch(clearCurrentRoom());\r\n      dispatch(setMatchState(undefined));\r\n      dispatch(resetTimer());\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    isLoading,\r\n    errorMessage,\r\n    socket,\r\n  };\r\n};\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\components\\ErrorModal\\element.ts",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\helpers\\socketHelper.ts",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\GreetingPage\\components\\Form\\index.tsx",["227","228","229","230","231","232","233","234","235","236","237","238"],"import React, { useState, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { errorMonitor } from 'events';\r\nimport { useAppDispatch } from '../../../../store/hook';\r\nimport {\r\n  FormContainer,\r\n  Form,\r\n  FormTitle,\r\n  FormInputSection,\r\n  FormInputLabel,\r\n  FormInputField,\r\n  FormButton,\r\n  FormLink,\r\n  FormLinkContainer,\r\n  FormLineBreak,\r\n} from './FormComponents';\r\nimport { hide, showWithComponent } from '../../../../store/Modal/slice';\r\nimport { setUser } from '../../../../store/auth/slice';\r\nimport { httpAdapter } from '../../../../adapter/http-request';\r\nimport { ErrorModal } from '../../../../components/ErrorModal';\r\n\r\ninterface ValidationError {\r\n  username?: string;\r\n  password?: string;\r\n}\r\n\r\nconst RegisterForm = () => {\r\n  const usernameRef = useRef<HTMLInputElement>(null);\r\n  const passwordRef = useRef<HTMLInputElement>(null);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [validationError, setValidationError] = useState<ValidationError>({});\r\n  const [requestError, setRequestError] = useState<string | undefined>();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const username = usernameRef.current?.value;\r\n    const password = passwordRef.current?.value;\r\n    if (!username || !password) {\r\n      return setValidationError({\r\n        username: 'Enter username',\r\n        password: 'Enter password',\r\n      });\r\n    }\r\n    setIsLoading(true);\r\n    const { data, error } = await httpAdapter.register(username, password);\r\n    setIsLoading(false);\r\n    if (error) {\r\n      // stay, only hide when close\r\n      // if (!error.status || error.status === 500) {\r\n      //   return dispatch(\r\n      //     showWithComponent(<ErrorModal errorMessage={error.message} />)\r\n      //   );\r\n      // }\r\n      // better display in form\r\n      return dispatch(\r\n        showWithComponent(<ErrorModal errorMessage={error.message} />)\r\n      );\r\n    }\r\n    if (data) {\r\n      // hide the modal and continue\r\n      dispatch(hide());\r\n      return dispatch(\r\n        setUser({ username: data.username, win: data.win, lose: data.lose })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormContainer>\r\n      <Form onSubmit={handleSubmit}>\r\n        <FormTitle>Sign up</FormTitle>\r\n        <FormInputSection>\r\n          <FormInputLabel htmlFor=\"username\">Username</FormInputLabel>\r\n          <FormInputField type=\"text\" ref={usernameRef} />\r\n        </FormInputSection>\r\n        <FormInputSection>\r\n          <FormInputLabel htmlFor=\"password\">Password</FormInputLabel>\r\n          <FormInputField type=\"password\" ref={passwordRef} />\r\n        </FormInputSection>\r\n        <FormButton type=\"submit\">Register</FormButton>\r\n        <FormButton\r\n          type=\"button\"\r\n          onClick={() => {\r\n            dispatch(hide());\r\n          }}\r\n        >\r\n          Cancel\r\n        </FormButton>\r\n      </Form>\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport const LoginForm = () => {\r\n  const usernameRef = useRef<HTMLInputElement>(null);\r\n  const passwordRef = useRef<HTMLInputElement>(null);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [validationError, setValidationError] = useState<ValidationError>({});\r\n  const [requestError, setRequestError] = useState<string | undefined>();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const username = usernameRef.current?.value;\r\n    const password = passwordRef.current?.value;\r\n    if (!username || !password) {\r\n      return setValidationError({\r\n        username: 'Enter username',\r\n        password: 'Enter password',\r\n      });\r\n    }\r\n    setIsLoading(true);\r\n    const { data, error } = await httpAdapter.login(username, password);\r\n    setIsLoading(false);\r\n    if (error) {\r\n      // dispatch error state, just be general\r\n      return dispatch(\r\n        showWithComponent(<ErrorModal errorMessage={error.message} />)\r\n      );\r\n      // if (!error.status || error.status === 500) {\r\n      //   return dispatch(showWithComponent(<div>{error.message}</div>));\r\n      //   return setRequestError('Internal server error');\r\n      // }\r\n      // return setRequestError(error.message);\r\n    }\r\n    if (data) {\r\n      return dispatch(\r\n        setUser({ username: data.username, win: data.win, lose: data.lose })\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <FormContainer>\r\n      <Form onSubmit={handleSubmit}>\r\n        <FormTitle>Log in and start playing</FormTitle>\r\n        <FormInputSection>\r\n          <FormInputLabel htmlFor=\"username\">Username</FormInputLabel>\r\n          <FormInputField type=\"text\" ref={usernameRef} />\r\n        </FormInputSection>\r\n        <FormInputSection>\r\n          <FormInputLabel htmlFor=\"password\">Password</FormInputLabel>\r\n          <FormInputField type=\"password\" ref={passwordRef} />\r\n        </FormInputSection>\r\n        <FormButton type=\"submit\">Login</FormButton>\r\n        {/* <FormLinkContainer>\r\n          <FormLink to=\"password_recover\">Forgot password?</FormLink>\r\n        </FormLinkContainer> */}\r\n        <FormLineBreak />\r\n        <FormButton\r\n          type=\"button\"\r\n          onClick={() => {\r\n            dispatch(showWithComponent(<RegisterForm />));\r\n          }}\r\n        >\r\n          Register\r\n        </FormButton>\r\n      </Form>\r\n    </FormContainer>\r\n  );\r\n};\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\UserBriefInfo\\index.tsx",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\GlobalChat\\index.tsx",["239","240"],"import React, { useState } from 'react';\r\nimport { Socket } from 'socket.io-client';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { RootState } from '../../../../store';\r\nimport { addMessage } from '../../../../store/chat/slice';\r\nimport { useAppDispatch, useAppSelector } from '../../../../store/hook';\r\nimport {\r\n  Messages,\r\n  ChatForm,\r\n  ChatMessage,\r\n  Container,\r\n  Input,\r\n  Header,\r\n  HeaderChoice,\r\n  SubmitButton,\r\n  SenderAndTime,\r\n  Sender,\r\n  Time,\r\n  Content,\r\n  Leaderboards,\r\n  LeaderboardsItem,\r\n  Win,\r\n  Place,\r\n  Info,\r\n  Name,\r\n  Statistic,\r\n  WinRate,\r\n} from './elements';\r\n\r\ninterface PropTypes {\r\n  socket: Socket | undefined;\r\n}\r\n\r\nexport const GlobalChat = ({ socket }: PropTypes): JSX.Element => {\r\n  const messages = useAppSelector((state: RootState) => state.chat.messages);\r\n  const me = useAppSelector(\r\n    (state: RootState) => state.auth.userInfo?.username\r\n  );\r\n  const [input, setInput] = useState('');\r\n  const [display, setDisplay] = useState(true);\r\n  const leaderboard = useAppSelector((state: RootState) => state.leaderBoards);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleSendMessage = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    socket?.emit('global_chat', {\r\n      sender: me,\r\n      content: input,\r\n    });\r\n    setInput('');\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <ThemeProvider theme={{ isSelected: display }}>\r\n          <HeaderChoice\r\n            onClick={() => {\r\n              setDisplay(true);\r\n            }}\r\n          >\r\n            Chat\r\n          </HeaderChoice>\r\n        </ThemeProvider>\r\n        <ThemeProvider theme={{ isSelected: !display }}>\r\n          <HeaderChoice\r\n            onClick={() => {\r\n              setDisplay(false);\r\n            }}\r\n          >\r\n            Leaderboards\r\n          </HeaderChoice>\r\n        </ThemeProvider>\r\n      </Header>\r\n      {display ? (\r\n        <>\r\n          <Messages>\r\n            {messages.map((message) => (\r\n              <ThemeProvider theme={{ isMyMessage: me === message.sender }}>\r\n                <ChatMessage key={message.time}>\r\n                  <SenderAndTime>\r\n                    <Sender>{message.sender}</Sender>\r\n                    <Time>\r\n                      {new Date(message.time).toTimeString().split(' ')[0]}\r\n                    </Time>\r\n                  </SenderAndTime>\r\n                  <Content>{message.content}</Content>\r\n                </ChatMessage>\r\n              </ThemeProvider>\r\n            ))}\r\n          </Messages>\r\n          <ChatForm onSubmit={handleSendMessage}>\r\n            <Input\r\n              type=\"text\"\r\n              onChange={(event) => {\r\n                setInput(event.target.value);\r\n              }}\r\n              value={input}\r\n            />\r\n            <SubmitButton type=\"submit\">Send</SubmitButton>\r\n          </ChatForm>\r\n        </>\r\n      ) : (\r\n        <Leaderboards>\r\n          {leaderboard.map((item, index) => {\r\n            const winRate =\r\n              item.win + item.lose === 0\r\n                ? 0\r\n                : (\r\n                    Math.round(\r\n                      (item.win / (item.win + item.lose)) * 100 * 100\r\n                    ) / 100\r\n                  ).toFixed(2);\r\n            return (\r\n              <LeaderboardsItem key={item.username}>\r\n                <ThemeProvider theme={{ place: index + 1 }}>\r\n                  <Place>{index + 1}</Place>\r\n                </ThemeProvider>\r\n                <Info>\r\n                  <Name>{item.username}</Name>\r\n                  <Statistic>\r\n                    <Win>{`Win: ${item.win}`}</Win>\r\n                    <WinRate>{`Win rate: ${winRate}%`}</WinRate>\r\n                  </Statistic>\r\n                </Info>\r\n              </LeaderboardsItem>\r\n            );\r\n          })}\r\n        </Leaderboards>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\index.tsx",["241","242"],"import React, { useState } from 'react';\r\nimport { Socket } from 'socket.io-client';\r\nimport { useSocket } from '../../../../hooks/useSocket';\r\nimport { RootState } from '../../../../store';\r\nimport { useAppSelector } from '../../../../store/hook';\r\nimport { CurrentRoom } from './board_component/currentRoom';\r\nimport { BoardElement, Container } from './elements';\r\n\r\ninterface PropTypes {\r\n  socket: Socket | undefined;\r\n}\r\n\r\nexport const MainBoard = ({ socket }: PropTypes): JSX.Element => {\r\n  // const { isLoading, errorMessage, socket } = useSocket('game');\r\n  const currentRoom = useAppSelector(\r\n    (state: RootState) => state.game.currentRoom\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      {currentRoom && socket ? (\r\n        <CurrentRoom socket={socket} currentRoom={currentRoom} />\r\n      ) : (\r\n        <BoardElement\r\n          // isLoading={isLoading}\r\n          // errorMessage={errorMessage}\r\n          socket={socket}\r\n        />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\GreetingPage\\components\\Form\\FormComponents.tsx",["243"],"import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nexport const FormContainer = styled.div`\r\n  background-color: #0e0b0b;\r\n  opacity: 0.75;\r\n  border-radius: 15px;\r\n  box-sizing: border-box;\r\n  box-shadow: 0 0 10px black;\r\n  color: white;\r\n  padding: 20px 20px;\r\n  max-width: 350px;\r\n  height: fit-content;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  max-height: fit-content;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const FormTitle = styled.div`\r\n  color: white;\r\n  font-size: 25px;\r\n  line-height: 1.3;\r\n  margin-bottom: 40px;\r\n  text-align: center;\r\n  height: fit-content;\r\n`;\r\n\r\nexport const FormInputSection = styled.div`\r\n  width: 100%;\r\n  display: inline-block;\r\n  box-sizing: inherit;\r\n  height: fit-content;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nexport const FormInputLabel = styled.label`\r\n  font-size: 15px;\r\n  height: fit-content;\r\n  display: block; // for margin along y-axis an inline element\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nexport const FormInputField = styled.input`\r\n  background-color: #635555;\r\n  box-sizing: border-box;\r\n  border-radius: 5px;\r\n  color: white;\r\n  font-size: 20px;\r\n  height: 46px;\r\n  line-height: 36px;\r\n  padding: 10px;\r\n  width: 100%;\r\n\r\n  :focus {\r\n    /* outline: none !important; */\r\n    border: 1px solid purple;\r\n    box-shadow: 0 0 10px #959da7;\r\n  }\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n  height: 40px;\r\n  width: 60%;\r\n  margin-bottom: 45px;\r\n  font-size: 25px;\r\n  color: white;\r\n  background-color: #b628a3;\r\n  border-radius: 25px;\r\n  border: 1px solid black;\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    transition: 0.5s ease-in-out;\r\n    background-color: purple;\r\n  }\r\n`;\r\n\r\nexport const FormLinkContainer = styled.div`\r\n  text-decoration: none;\r\n  color: white;\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nexport const FormLink = styled(NavLink)`\r\n  text-decoration: none;\r\n  color: white;\r\n`;\r\n\r\nexport const FormLineBreak = styled.div`\r\n  align-items: center;\r\n  border-bottom: 1px solid rgb(218 221 225);\r\n  display: flex;\r\n  margin-bottom: 30px;\r\n  text-align: center;\r\n`;\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\UserBriefInfo\\elements.tsx",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\GlobalChat\\elements.tsx",["244"],"import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 2px 5px;\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  height: fit-content;\r\n`;\r\n\r\nexport const HeaderChoice = styled.div`\r\n  text-align: center;\r\n  height: fit-content;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  border: 1px solid black;\r\n\r\n  background-color: ${(props) => {\r\n    if (props.theme.isSelected) return '#c0a9ba';\r\n    return 'white';\r\n  }};\r\n  :hover {\r\n    background-color: #9c7272;\r\n  }\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const Leaderboards = styled.div`\r\n  margin-top: 2px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px solid black;\r\n\r\n  overflow-y: auto;\r\n  height: 100%;\r\n  /* height: 100%; */\r\n`;\r\n\r\nexport const LeaderboardsItem = styled.div`\r\n  display: flex;\r\n  /* flex-direction: column; */\r\n  width: 100%;\r\n  padding: 6px 5px;\r\n  height: fit-content;\r\n  border-bottom: 1px solid black;\r\n  font-size: 20px;\r\n  /* margin-bottom: 5px; */\r\n`;\r\n\r\nexport const Place = styled.div`\r\n  /* padding: 5px 5px; */\r\n  text-align: center;\r\n  font-size: 25px;\r\n  height: 40px;\r\n  width: 58px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  border: 1px solid black;\r\n  border-radius: 50%;\r\n  margin-right: 30px;\r\n\r\n  background-color: ${(props) => {\r\n    switch (props.theme.place) {\r\n      case 1:\r\n        return '#d1c35d';\r\n      case 2:\r\n        return '#bdbbad';\r\n      case 3:\r\n        return '#c99556';\r\n      default:\r\n        return 'white';\r\n    }\r\n  }};\r\n`;\r\n\r\nexport const Info = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  /* width: 100%; */\r\n`;\r\n\r\nexport const Name = styled.div`\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nexport const Statistic = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  /* justify-content: space-evenly; */\r\n`;\r\n\r\nexport const Win = styled.div`\r\n  width: 80px;\r\n`;\r\n\r\nexport const WinRate = styled.div`\r\n  margin-left: 5px;\r\n  width: fit-content;\r\n`;\r\n\r\nexport const Messages = styled.div`\r\n  margin-top: 2px;\r\n  display: flex;\r\n  flex-direction: column-reverse;\r\n  border: 1px solid black;\r\n\r\n  overflow-y: auto;\r\n  height: 100%;\r\n  /* height: 100%; */\r\n`;\r\n\r\nexport const ChatMessage = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 10px 10px;\r\n  height: fit-content;\r\n  border-top: 1px solid black;\r\n`;\r\n\r\nexport const SenderAndTime = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 2px;\r\n  height: fit-content;\r\n`;\r\n\r\nexport const Sender = styled.div`\r\n  font-weight: bold;\r\n  text-align: left;\r\n  margin-left: 3px;\r\n  margin-right: 3px;\r\n  width: fit-content;\r\n  height: fit-content;\r\n  display: ${(props) => props.theme.isMyMessage && 'none'};\r\n`;\r\n\r\nexport const Time = styled.div`\r\n  font-style: italic;\r\n  width: fit-content;\r\n  height: fit-content;\r\n  margin-left: auto;\r\n  margin-right: 0;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  margin-right: ${(props) => (props.theme.isMyMessage ? '5px' : 'auto')};\r\n  margin-left: ${(props) => (props.theme.isMyMessage ? 'auto' : '5px')};\r\n  height: fit-content;\r\n  width: fit-content;\r\n  padding: 5px 5px;\r\n  background-color: #d1c5c5;\r\n  border-radius: ${(props) => {\r\n    if (props.theme.isMyMessage) return '10px 3px 10px 10px';\r\n    return '3px 10px 10px 10px';\r\n  }};\r\n  display: block;\r\n  max-width: 200px;\r\n  overflow-wrap: break-word;\r\n`;\r\n\r\nexport const ChatForm = styled.form`\r\n  display: flex;\r\n  height: fit-content;\r\n  margin-top: 2px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  border: 1px solid black;\r\n  height: 35px;\r\n  padding: 5px 5px;\r\n  /* width: 70%; */\r\n\r\n  :focus {\r\n    outline: tomato;\r\n    border: 2px solid blueviolet;\r\n  }\r\n`;\r\n\r\nexport const SubmitButton = styled.button`\r\n  background: #afb3b9;\r\n  height: 35px;\r\n  padding: 5px 5px;\r\n  cursor: pointer;\r\n  width: 50%;\r\n\r\n  :hover {\r\n    background: #c5abb9;\r\n  }\r\n`;\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\elements.tsx",[],"E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\board_component\\currentRoom\\index.tsx",["245","246","247"],"import React, { useEffect } from 'react';\r\nimport { Socket } from 'socket.io-client';\r\nimport styled from 'styled-components';\r\nimport { RootState } from '../../../../../../store';\r\nimport { ICurrentRoom } from '../../../../../../store/game/slice';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../../store/hook';\r\nimport {\r\n  setActiveTimer,\r\n  setTimerAfterTick,\r\n} from '../../../../../../store/timer/slice';\r\nimport { RoomInfoPanel } from './infoPanel';\r\nimport { GameBoard } from './playground/matchBoard';\r\n\r\nconst Container = styled.div`\r\n  /* padding: 10px 10px; */\r\n  /* border: 1px solid red; */\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  /* justify-content: space-between; */\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nconst Left = styled.div`\r\n  /* padding: 5px 5px; */\r\n  /* border: 1px solid yellowgreen; */\r\n`;\r\n\r\nconst Playground = styled.div`\r\n  padding: 5px 5px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Right = styled.div`\r\n  padding: 5px 5px;\r\n  border-left: 1px solid black;\r\n  /* border: 1px solid blue; */\r\n  width: 70%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  /* justify-content: space-between; */\r\n\r\n  /* @media screen and (max-width: 1000px) {\r\n    display: none;\r\n  } */\r\n`;\r\n\r\ninterface PropTypes {\r\n  socket?: Socket;\r\n  currentRoom: ICurrentRoom;\r\n}\r\n\r\nexport const CurrentRoom = ({ socket, currentRoom }: PropTypes) => {\r\n  const dispatch = useAppDispatch();\r\n  const { matchStart: matchStartTimer, matchMove: matchMoveTimer } =\r\n    useAppSelector((state: RootState) => state.timer);\r\n  const currentMatch = useAppSelector(\r\n    (state: RootState) => state.game.currentMatch\r\n  );\r\n\r\n  useEffect(() => {\r\n    let matchStartInterval: any;\r\n    if (matchStartTimer.isActive) {\r\n      matchStartInterval = setInterval(() => {\r\n        dispatch(setTimerAfterTick('matchStart'));\r\n      }, 1000);\r\n    }\r\n    return () => {\r\n      if (matchStartInterval) clearInterval(matchStartInterval);\r\n    };\r\n  }, [matchStartTimer.isActive]);\r\n\r\n  return (\r\n    <Container>\r\n      <Left>\r\n        <Playground>\r\n          {matchStartTimer.isActive ? (\r\n            <div>\r\n              The match will begin after {matchStartTimer.remain} second\r\n            </div>\r\n          ) : (\r\n            currentMatch && (\r\n              <GameBoard currentMatch={currentMatch} socket={socket} />\r\n            )\r\n          )}\r\n        </Playground>\r\n      </Left>\r\n      <Right>\r\n        <RoomInfoPanel currentRoom={currentRoom} socket={socket} />\r\n      </Right>\r\n    </Container>\r\n  );\r\n};\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\board_component\\createRoom\\createRoom.tsx",["248","249"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { Socket } from 'socket.io-client';\r\n\r\nimport styled from 'styled-components';\r\nimport { socketHelper } from '../../../../../../helpers/socketHelper';\r\nimport { RootState } from '../../../../../../store';\r\nimport { setCurrentRoom } from '../../../../../../store/game/slice';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../../store/hook';\r\nimport { Player, Room } from '../../interface/room.interface';\r\n\r\nconst Container = styled.div`\r\n  padding: 10px 10px;\r\n  width: 40%;\r\n  height: fit-content;\r\n  /* border: 1px solid red; */\r\n`;\r\n\r\nconst CreateRoomForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  border: 1px solid black;\r\n`;\r\n\r\nconst FormTitle = styled.div`\r\n  text-align: center;\r\n  font-size: 30px;\r\n  font-weight: bold;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst FormInputLine = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nconst InputLabel = styled.label`\r\n  text-align: center;\r\n  padding: 0px 15px;\r\n  width: fit-content;\r\n`;\r\n\r\nconst InputField = styled.input`\r\n  height: 100%;\r\n  width: 150px;\r\n  padding: 2px 3px;\r\n  margin-right: 15px;\r\n`;\r\n\r\nconst SubmitButton = styled.button`\r\n  height: fit-content;\r\n  width: fit-content;\r\n  padding: 5px 5px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst ErrorState = styled.div`\r\n  text-align: center;\r\n  font-size: 20px;\r\n  color: red;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\ninterface PropTypes {\r\n  socket?: Socket;\r\n  // changeToRoom:\r\n}\r\n\r\ntype CreateRoomResult =\r\n  | {\r\n      data: undefined;\r\n      errorMessage: string;\r\n    }\r\n  | { errorMessage: undefined; data: Room };\r\n\r\nexport const CreateRoom = ({ socket }: PropTypes) => {\r\n  const me = useAppSelector((state: RootState) => state.auth.userInfo);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const roomNameRef = useRef<HTMLInputElement>(null);\r\n  const roomPasswordRef = useRef<HTMLInputElement>(null);\r\n  const [error, setError] = useState<string | undefined>();\r\n  let isMounted = false;\r\n\r\n  useEffect(() => {\r\n    isMounted = true;\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  });\r\n\r\n  const handleCreateRoom = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const roomName = roomNameRef.current?.value;\r\n    const roomPassword = roomPasswordRef.current?.value;\r\n    if (!roomName) setError('Enter room name first');\r\n    else {\r\n      socket?.emit(\r\n        'create_room',\r\n        { roomName, roomPassword },\r\n        (result: CreateRoomResult) => {\r\n          if (!isMounted) return;\r\n          if (result.errorMessage) return setError(result.errorMessage);\r\n          if (result.data) {\r\n            const myRole = socketHelper.getMyRole(me, result.data);\r\n            if (!myRole) return;\r\n            dispatch(setCurrentRoom({ room: result.data, me: myRole }));\r\n          }\r\n        }\r\n      );\r\n    }\r\n    setTimeout(() => {\r\n      if (isMounted) setError(undefined);\r\n    }, 3000);\r\n  };\r\n  return (\r\n    <Container>\r\n      <CreateRoomForm onSubmit={handleCreateRoom}>\r\n        <FormTitle>Create new room</FormTitle>\r\n        <FormInputLine>\r\n          <InputLabel htmlFor=\"room_name\">Room name:</InputLabel>\r\n          <InputField type=\"text\" ref={roomNameRef} />\r\n        </FormInputLine>\r\n        <FormInputLine>\r\n          <InputLabel htmlFor=\"room_name\">Room password:</InputLabel>\r\n          <InputField type=\"password\" ref={roomPasswordRef} />\r\n        </FormInputLine>\r\n        <SubmitButton>Create</SubmitButton>\r\n        {error && <ErrorState>{error}</ErrorState>}\r\n      </CreateRoomForm>\r\n    </Container>\r\n  );\r\n};\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\board_component\\roomList\\roomList.tsx",["250","251","252","253","254","255","256","257"],"import React, { useState } from 'react';\r\nimport { Socket } from 'socket.io-client';\r\nimport styled from 'styled-components';\r\nimport { ErrorModal } from '../../../../../../components/ErrorModal';\r\nimport { RootState } from '../../../../../../store';\r\nimport {\r\n  setCurrentRoom,\r\n  setMatchState,\r\n} from '../../../../../../store/game/slice';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../../store/hook';\r\nimport { showWithComponent } from '../../../../../../store/Modal/slice';\r\nimport { setActiveTimer } from '../../../../../../store/timer/slice';\r\nimport { JoinRoomResult, Room } from '../../interface/room.interface';\r\nimport { RoomCard } from './roomCard';\r\n\r\nconst Container = styled.div`\r\n  padding: 10px 10px;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n`;\r\n\r\nconst NoRoom = styled.div`\r\n  text-align: center;\r\n  font-size: 30px;\r\n`;\r\n\r\nconst Filter = styled.div`\r\n  height: fit-content;\r\n  width: fit-content;\r\n  padding: 10px 10px;\r\n  display: flex;\r\n  align-items: center;\r\n  border-bottom: 1px solid black;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst FilterInput = styled.input`\r\n  padding: 4px 5px;\r\n  width: 200px;\r\n`;\r\n\r\nconst Rooms = styled.div`\r\n  padding: 10px 10px;\r\n  border: 1px solid black;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n\r\n  overflow-y: auto;\r\n  height: 400px;\r\n`;\r\n\r\ninterface PropTypes {\r\n  socket?: Socket;\r\n}\r\n\r\nexport const RoomList = ({ socket }: PropTypes) => {\r\n  const roomList = useAppSelector((state: RootState) => state.game.roomList);\r\n  const [filterValue, setFilterValue] = useState('');\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleJoinRoom = (roomName: string, roomPassword?: string) => {\r\n    socket?.emit('join_room', { roomName, roomPassword });\r\n  };\r\n\r\n  const filteredRoom = roomList\r\n    .filter((room) => room.name.includes(filterValue))\r\n    .map((room) => (\r\n      <RoomCard room={room} key={room?.name} handleJoinRoom={handleJoinRoom} />\r\n    ));\r\n  return (\r\n    <Container>\r\n      <Filter>\r\n        <FilterInput\r\n          placeholder=\"Enter filter\"\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setFilterValue(e.target.value);\r\n          }}\r\n        />\r\n      </Filter>\r\n      <Rooms>\r\n        {filteredRoom.length ? filteredRoom : <NoRoom>No room</NoRoom>}\r\n      </Rooms>\r\n    </Container>\r\n  );\r\n};\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\board_component\\currentRoom\\playground\\matchBoard.tsx",["258","259","260"],"import React from 'react';\r\nimport { Socket } from 'socket.io-client';\r\nimport styled from 'styled-components';\r\nimport {\r\n  MatchState,\r\n  setMatchStateAfterMove,\r\n} from '../../../../../../../store/game/slice';\r\nimport { useAppDispatch } from '../../../../../../../store/hook';\r\nimport { OnGoingMatch } from '../../../interface/room.interface';\r\nimport { GameSquare } from './square';\r\n\r\nconst Board = styled.div`\r\n  /* border: 1px solid black; */\r\n  width: fit-content;\r\n\r\n  /* height: 100%; */\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n`;\r\n\r\nconst Column = styled.div`\r\n  height: 35px;\r\n  min-width: 500px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n`;\r\n\r\ninterface PropTypes {\r\n  currentMatch: OnGoingMatch;\r\n  socket?: Socket;\r\n}\r\n\r\nexport const GameBoard = ({ currentMatch, socket }: PropTypes) => {\r\n  const dispatch = useAppDispatch();\r\n  const { matchMoves, result } = currentMatch;\r\n\r\n  const handleMove = (xIndex: number, yIndex: number) => {\r\n    if (matchMoves[xIndex][yIndex]) return;\r\n    socket?.emit('match_move', { xIndex, yIndex }, (success: boolean) => {\r\n      if (!success) return false;\r\n    });\r\n  };\r\n\r\n  const gameBoard = matchMoves.map((column, colIndex) => {\r\n    const colKey = colIndex;\r\n    return (\r\n      <Column key={`column${colKey}`}>\r\n        {column.map((squareVal, squareIndex) => {\r\n          const squareKey = `${colKey},${squareIndex}`;\r\n          const isStreak = !!(\r\n            result &&\r\n            result.streak &&\r\n            result.streak.find(\r\n              (streak) =>\r\n                streak.xIndex === colIndex && streak.yIndex === squareIndex\r\n            )\r\n          );\r\n          return (\r\n            <GameSquare\r\n              key={squareKey}\r\n              xIndex={colIndex}\r\n              yIndex={squareIndex}\r\n              value={squareVal}\r\n              handleMove={handleMove}\r\n              isLastMove={\r\n                currentMatch.lastMove\r\n                  ? currentMatch.lastMove.xIndex === colIndex &&\r\n                    currentMatch.lastMove.yIndex === squareIndex\r\n                  : false\r\n              }\r\n              isStreak={isStreak}\r\n            />\r\n          );\r\n        })}\r\n      </Column>\r\n    );\r\n  });\r\n\r\n  return <Board>{gameBoard}</Board>;\r\n};\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\board_component\\roomList\\roomCard.tsx",["261"],"import React, { useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Room } from '../../interface/room.interface';\r\n\r\nconst Container = styled.div`\r\n  border: 1px solid black;\r\n  padding: 10px 10px;\r\n  height: fit-content;\r\n  width: 100%;\r\n  margin-bottom: 15px;\r\n\r\n  display: flex;\r\n  /* flex-direction: column; */\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst Left = styled.div`\r\n  padding: 5px 5px;\r\n  height: 100%;\r\n  width: 80%;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst RoomName = styled.div`\r\n  font-size: 25px;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst RoomPlayers = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 30px;\r\n`;\r\n\r\nconst Player = styled.div`\r\n  height: fit-content;\r\n  width: fit-content;\r\n  padding: 5px 5px;\r\n`;\r\n\r\nconst Versus = styled.div`\r\n  height: fit-content;\r\n  width: fit-content;\r\n  margin-left: 40px;\r\n  margin-right: 40px;\r\n  font-size: 20px;\r\n`;\r\n\r\nconst RoomAmount = styled.div`\r\n  font-size: 20px;\r\n`;\r\n\r\nconst Right = styled.div`\r\n  padding: 25px 10px;\r\n  height: fit-content;\r\n  width: fit-content;\r\n\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst RoomPassword = styled.input`\r\n  padding: 5px 5px;\r\n  height: fit-content;\r\n  width: 150px;\r\n  margin-right: 30px;\r\n`;\r\n\r\nconst JoinButton = styled.button`\r\n  padding: 5px 5px;\r\n  height: fit-content;\r\n  width: 60px;\r\n`;\r\n\r\ninterface PropTypes {\r\n  room: Room;\r\n  handleJoinRoom: (roomName: string, roomPassword?: string) => void;\r\n}\r\n\r\nexport const RoomCard = ({ room, handleJoinRoom }: PropTypes) => {\r\n  const roomPasswordRef = useRef<HTMLInputElement>(null);\r\n  const player1 = room.player.find((player) => player.pos === 1);\r\n  const player2 = room.player.find((player) => player.pos === 2);\r\n\r\n  return (\r\n    <Container key={room.name}>\r\n      <Left>\r\n        <RoomName>{`Room name: ${room.name}`}</RoomName>\r\n        {/* <RoomAmount>{`Room amount: ${room.player.length}`}</RoomAmount> */}\r\n        <RoomPlayers>\r\n          <Player>{player1 ? player1.name : '---'}</Player>\r\n          <Versus>vs</Versus>\r\n          <Player>{player2 ? player2.name : '---'}</Player>\r\n        </RoomPlayers>\r\n      </Left>\r\n      <Right>\r\n        {room.havePassword && (\r\n          <RoomPassword\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            ref={roomPasswordRef}\r\n          />\r\n        )}\r\n        <JoinButton\r\n          onClick={() => {\r\n            if (room.havePassword) {\r\n              if (roomPasswordRef.current?.value === '') return; // better show error\r\n              handleJoinRoom(room.name, roomPasswordRef.current?.value);\r\n            }\r\n            handleJoinRoom(room.name);\r\n          }}\r\n        >\r\n          Join\r\n        </JoinButton>\r\n      </Right>\r\n    </Container>\r\n  );\r\n};\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\board_component\\currentRoom\\infoPanel\\index.tsx",["262","263","264"],"import React, { useEffect } from 'react';\r\nimport { Socket } from 'socket.io-client';\r\nimport styled, { ThemeProvider } from 'styled-components';\r\nimport { RootState } from '../../../../../../../store';\r\nimport { ICurrentRoom } from '../../../../../../../store/game/slice';\r\nimport {\r\n  useAppDispatch,\r\n  useAppSelector,\r\n} from '../../../../../../../store/hook';\r\nimport {\r\n  setActiveTimer,\r\n  setTimerAfterTick,\r\n} from '../../../../../../../store/timer/slice';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst RoomName = styled.div`\r\n  text-align: center;\r\n  font-size: 30px;\r\n  font-weight: bold;\r\n  height: fit-content;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst RoomOwner = styled.div`\r\n  text-align: center;\r\n  font-size: 25px;\r\n  height: fit-content;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst PlayerList = styled.div`\r\n  height: fit-content;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst RoomPlayer = styled.div`\r\n  height: fit-content;\r\n  /* padding: 5px 5px; */\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-bottom: 15px;\r\n  /* border: 1px solid salmon; */\r\n  color: ${(props) => props.theme.nextTurn && 'red'};\r\n`;\r\n\r\nconst JoinButton = styled.button`\r\n  padding: 5px 15px;\r\n  background: #e9e8eb;\r\n  height: fit-content;\r\n  width: fit-content;\r\n  cursor: pointer;\r\n  /* margin-left: 30px; */\r\n\r\n  :hover {\r\n    background: #c0a9be;\r\n  }\r\n`;\r\n\r\nconst PlayerRow = styled.div`\r\n  padding: 0px 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  height: fit-content;\r\n  width: fit-content;\r\n  /* border: 1px solid blue; */\r\n`;\r\n\r\nconst PlayerLabel = styled.span`\r\n  font-size: 20px;\r\n  height: fit-content;\r\n  width: fit-content;\r\n  margin-right: 50px;\r\n`;\r\n\r\nconst PlayerName = styled.div`\r\n  font-size: 20px;\r\n  height: fit-content;\r\n  width: fit-content;\r\n  /* margin-left: 60px; */\r\n`;\r\n\r\nconst PlayerReadyState = styled.div`\r\n  font-size: 20px;\r\n  height: fit-content;\r\n  width: fit-content;\r\n  margin-right: 30px;\r\n`;\r\n\r\nconst PlayerTurnTimer = styled.div`\r\n  font-size: 25px;\r\n  height: fit-content;\r\n  width: fit-content;\r\n  margin-right: 30px;\r\n`;\r\n\r\nconst MatchResult = styled.div`\r\n  font-size: 25px;\r\n  height: fit-content;\r\n  width: fit-content;\r\n  color: red;\r\n  text-align: center;\r\n`;\r\n\r\nconst Reason = styled.div`\r\n  font-size: 25px;\r\n  height: fit-content;\r\n  width: fit-content;\r\n  color: red;\r\n  text-align: center;\r\n`;\r\n\r\nconst RoomViewerList = styled.div`\r\n  height: fit-content;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst RoomViewerRow = styled.div`\r\n  text-align: center;\r\n  font-size: 25px;\r\n  height: fit-content;\r\n`;\r\n\r\nconst ReadyButton = styled.button`\r\n  padding: 5px 10px;\r\n  background: #e9e8eb;\r\n  height: fit-content;\r\n  width: fit-content;\r\n  cursor: pointer;\r\n  margin-bottom: 50px;\r\n\r\n  :hover {\r\n    background: #6da0af;\r\n  }\r\n`;\r\n\r\nconst LeaveButton = styled.button`\r\n  padding: 5px 10px;\r\n  background: #e9e8eb;\r\n  height: fit-content;\r\n  width: fit-content;\r\n  cursor: pointer;\r\n  margin-bottom: 50px;\r\n\r\n  :hover {\r\n    background: #6da0af;\r\n  }\r\n`;\r\n\r\nconst BeViewerButton = styled.button`\r\n  padding: 5px 10px;\r\n  background: #e9e8eb;\r\n  height: fit-content;\r\n  width: fit-content;\r\n  cursor: pointer;\r\n  margin-bottom: 50px;\r\n\r\n  :hover {\r\n    background: #6da0af;\r\n  }\r\n`;\r\n\r\ninterface PropTypes {\r\n  currentRoom: ICurrentRoom;\r\n  socket?: Socket;\r\n}\r\n\r\nexport const RoomInfoPanel = ({ currentRoom, socket }: PropTypes) => {\r\n  const dispatch = useAppDispatch();\r\n  const { matchMove: matchMoveTimer } = useAppSelector(\r\n    (state: RootState) => state.timer\r\n  );\r\n  const currentMatch = useAppSelector(\r\n    (state: RootState) => state.game.currentMatch\r\n  );\r\n  const { me } = currentRoom;\r\n\r\n  const handleRequestToBePlayer = (pos: number) => {\r\n    socket?.emit('request_to_be_player', pos, (success: boolean) => {\r\n      // console.log(success);\r\n    });\r\n  };\r\n\r\n  const handleRequestToBeViewer = () => {\r\n    socket?.emit('request_to_be_viewer', (success: boolean) => {\r\n      // console.log(success);\r\n    });\r\n  };\r\n\r\n  const handleChangeReadyStatus = () => {\r\n    socket?.emit('ready_status_change', (success: boolean) => {\r\n      // console.log(success);\r\n    });\r\n  };\r\n\r\n  const handleLeave = () => {\r\n    socket?.emit('leave_room', (success: boolean) => {\r\n      if (!success) return false;\r\n    });\r\n  };\r\n\r\n  const playerList = Array(2)\r\n    .fill(null)\r\n    .map((val, index) => {\r\n      const existPlayer = currentRoom.room.player.find(\r\n        (player) => player.pos === index + 1\r\n      );\r\n      const key = `player${index}`;\r\n      // const isInMatch = !!currentMatch\r\n      const isNextTurn =\r\n        currentMatch &&\r\n        !!(currentMatch.nextTurn === index + 1 && matchMoveTimer.isActive);\r\n      return (\r\n        <ThemeProvider theme={{ nextTurn: isNextTurn }} key={key}>\r\n          <RoomPlayer>\r\n            <PlayerRow>\r\n              <PlayerLabel>\r\n                Player\r\n                {` ${index + 1}`}\r\n              </PlayerLabel>\r\n              {existPlayer ? (\r\n                <PlayerName>\r\n                  {existPlayer.name === me.name ? 'Me' : existPlayer.name}\r\n                </PlayerName>\r\n              ) : (\r\n                <JoinButton onClick={() => handleRequestToBePlayer(index + 1)}>\r\n                  Be a player\r\n                </JoinButton>\r\n              )}\r\n            </PlayerRow>\r\n            {currentMatch ? (\r\n              isNextTurn ? (\r\n                <PlayerTurnTimer>{matchMoveTimer.remain} </PlayerTurnTimer>\r\n              ) : null\r\n            ) : (\r\n              <PlayerReadyState>\r\n                {existPlayer && (existPlayer.isReady ? 'Ready' : 'Not ready')}\r\n              </PlayerReadyState>\r\n            )}\r\n          </RoomPlayer>\r\n        </ThemeProvider>\r\n      );\r\n    });\r\n\r\n  const viewerList = currentRoom.room.viewer.map((viewer) => (\r\n    <RoomViewerRow key={viewer.name}>\r\n      {viewer.name === me.name ? 'Me' : viewer.name}\r\n    </RoomViewerRow>\r\n  ));\r\n\r\n  useEffect(() => {\r\n    let matchMoveInterval: any;\r\n    if (matchMoveTimer.isActive) {\r\n      matchMoveInterval = setInterval(() => {\r\n        dispatch(setTimerAfterTick('matchMove'));\r\n      }, 1000);\r\n    }\r\n    return () => {\r\n      if (matchMoveInterval) {\r\n        clearInterval(matchMoveInterval);\r\n      }\r\n    };\r\n  }, [matchMoveTimer.isActive]);\r\n\r\n  let winner;\r\n  if (currentMatch && currentMatch.result) {\r\n    winner = currentRoom.room.player.find(\r\n      (player) => player.pos === currentMatch.result?.winner\r\n    )?.name;\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <RoomName>{`Room: ${currentRoom.room.name}`}</RoomName>\r\n      <PlayerList>{playerList}</PlayerList>\r\n      {currentMatch && currentMatch.result && (\r\n        <>\r\n          <MatchResult>\r\n            {winner === me.name ? 'You win' : `Player ${winner} win`}\r\n          </MatchResult>\r\n          {currentMatch.result.reason && (\r\n            <Reason>{currentMatch.result.reason}</Reason>\r\n          )}\r\n        </>\r\n      )}\r\n      {!currentMatch && 'pos' in me ? (\r\n        <>\r\n          <ReadyButton\r\n            type=\"button\"\r\n            onClick={() => {\r\n              handleChangeReadyStatus();\r\n            }}\r\n          >\r\n            {me.isReady ? 'Not ready' : 'Ready'}\r\n          </ReadyButton>\r\n          {!me.isReady && (\r\n            <BeViewerButton\r\n              onClick={() => {\r\n                handleRequestToBeViewer();\r\n              }}\r\n            >\r\n              Be a viewer\r\n            </BeViewerButton>\r\n          )}\r\n        </>\r\n      ) : null}\r\n      <LeaveButton\r\n        onClick={() => {\r\n          handleLeave();\r\n        }}\r\n      >\r\n        Leave\r\n      </LeaveButton>\r\n      <RoomViewerList>{viewerList}</RoomViewerList>\r\n    </Container>\r\n  );\r\n};\r\n","E:\\Freelancer\\Github\\caroPlay\\client\\src\\pages\\UserHomePage\\components\\MainBoard\\board_component\\currentRoom\\playground\\square.tsx",["265","266"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport styled, { ThemeProvider } from 'styled-components';\r\nimport { useAppDispatch } from '../../../../../../../store/hook';\r\n\r\nconst Square = styled.div`\r\n  border: 1px solid black;\r\n  width: 35px;\r\n  height: 35px;\r\n  padding: 1px 1px;\r\n  text-align: center;\r\n  font-weight: bold;\r\n  font-size: 30px;\r\n  background: ${(props) => {\r\n    if (props.theme.streak) return '#c96284';\r\n    if (props.theme.highLight) return '#be9bbc';\r\n  }};\r\n  color: ${(props) => {\r\n    if (props.theme.main === 1) return 'blue';\r\n    if (props.theme.main === 0) return 'black';\r\n  }};\r\n\r\n  :hover {\r\n    background: ${(props) => {\r\n      if (!props.theme.main) return '#ccd3da';\r\n    }};\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\ninterface PropTypes {\r\n  xIndex: number;\r\n  yIndex: number;\r\n  value: 1 | 2 | null;\r\n  handleMove: (xIndex: number, yIndex: number) => void;\r\n  isLastMove: boolean;\r\n  isStreak: boolean;\r\n}\r\n\r\nexport const GameSquare = ({\r\n  xIndex,\r\n  yIndex,\r\n  value,\r\n  handleMove,\r\n  isLastMove,\r\n  isStreak,\r\n}: PropTypes) => {\r\n  const [isHighlight, setIsHighLight] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (isLastMove) {\r\n      // console.log(isHighlight);\r\n      setIsHighLight(true);\r\n\r\n      setTimeout(() => {\r\n        setIsHighLight(false);\r\n      }, 1000);\r\n    }\r\n  }, [value]);\r\n  // const [isTicked, setIsTicked] = useState<boolean>(false);\r\n  return (\r\n    <ThemeProvider\r\n      theme={{ main: value, highLight: isHighlight, streak: isStreak }}\r\n    >\r\n      <Square\r\n        onClick={() => {\r\n          if (value) return;\r\n          handleMove(xIndex, yIndex);\r\n        }}\r\n      >\r\n        {value && (value === 1 ? 'X' : 'O')}\r\n      </Square>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n",{"ruleId":"267","severity":1,"message":"268","line":3,"column":10,"nodeType":"269","messageId":"270","endLine":3,"endColumn":18},{"ruleId":"267","severity":1,"message":"271","line":4,"column":15,"nodeType":"269","messageId":"270","endLine":4,"endColumn":24},{"ruleId":"267","severity":1,"message":"272","line":2,"column":38,"nodeType":"269","messageId":"270","endLine":2,"endColumn":45},{"ruleId":"267","severity":1,"message":"271","line":9,"column":15,"nodeType":"269","messageId":"270","endLine":9,"endColumn":24},{"ruleId":"267","severity":1,"message":"273","line":3,"column":10,"nodeType":"269","messageId":"270","endLine":3,"endColumn":23},{"ruleId":"267","severity":1,"message":"274","line":5,"column":10,"nodeType":"269","messageId":"270","endLine":5,"endColumn":26},{"ruleId":"267","severity":1,"message":"271","line":6,"column":15,"nodeType":"269","messageId":"270","endLine":6,"endColumn":24},{"ruleId":"267","severity":1,"message":"271","line":3,"column":15,"nodeType":"269","messageId":"270","endLine":3,"endColumn":24},{"ruleId":"267","severity":1,"message":"275","line":9,"column":8,"nodeType":"269","messageId":"270","endLine":9,"endColumn":16},{"ruleId":"267","severity":1,"message":"276","line":11,"column":8,"nodeType":"269","messageId":"270","endLine":11,"endColumn":20},{"ruleId":"277","severity":1,"message":"278","line":41,"column":6,"nodeType":"279","endLine":41,"endColumn":8,"suggestions":"280"},{"ruleId":"267","severity":1,"message":"281","line":2,"column":3,"nodeType":"269","messageId":"270","endLine":2,"endColumn":16},{"ruleId":"267","severity":1,"message":"282","line":5,"column":3,"nodeType":"269","messageId":"270","endLine":5,"endColumn":16},{"ruleId":"267","severity":1,"message":"283","line":6,"column":3,"nodeType":"269","messageId":"270","endLine":6,"endColumn":8},{"ruleId":"267","severity":1,"message":"284","line":5,"column":16,"nodeType":"269","messageId":"270","endLine":5,"endColumn":33},{"ruleId":"267","severity":1,"message":"285","line":2,"column":10,"nodeType":"269","messageId":"270","endLine":2,"endColumn":17},{"ruleId":"267","severity":1,"message":"286","line":20,"column":8,"nodeType":"269","messageId":"270","endLine":20,"endColumn":21},{"ruleId":"267","severity":1,"message":"287","line":1,"column":8,"nodeType":"269","messageId":"270","endLine":1,"endColumn":13},{"ruleId":"267","severity":1,"message":"288","line":1,"column":17,"nodeType":"269","messageId":"270","endLine":1,"endColumn":25},{"ruleId":"267","severity":1,"message":"289","line":2,"column":8,"nodeType":"269","messageId":"270","endLine":2,"endColumn":14},{"ruleId":"267","severity":1,"message":"290","line":3,"column":10,"nodeType":"269","messageId":"270","endLine":3,"endColumn":19},{"ruleId":"267","severity":1,"message":"287","line":1,"column":8,"nodeType":"269","messageId":"270","endLine":1,"endColumn":13},{"ruleId":"267","severity":1,"message":"287","line":1,"column":8,"nodeType":"269","messageId":"270","endLine":1,"endColumn":13},{"ruleId":"267","severity":1,"message":"291","line":3,"column":10,"nodeType":"269","messageId":"270","endLine":3,"endColumn":14},{"ruleId":"267","severity":1,"message":"292","line":12,"column":3,"nodeType":"269","messageId":"270","endLine":12,"endColumn":13},{"ruleId":"267","severity":1,"message":"293","line":42,"column":9,"nodeType":"269","messageId":"270","endLine":42,"endColumn":15},{"ruleId":"277","severity":1,"message":"294","line":195,"column":6,"nodeType":"279","endLine":195,"endColumn":8,"suggestions":"295"},{"ruleId":"267","severity":1,"message":"289","line":2,"column":8,"nodeType":"269","messageId":"270","endLine":2,"endColumn":14},{"ruleId":"267","severity":1,"message":"296","line":3,"column":10,"nodeType":"269","messageId":"270","endLine":3,"endColumn":22},{"ruleId":"267","severity":1,"message":"297","line":13,"column":3,"nodeType":"269","messageId":"270","endLine":13,"endColumn":11},{"ruleId":"267","severity":1,"message":"298","line":14,"column":3,"nodeType":"269","messageId":"270","endLine":14,"endColumn":20},{"ruleId":"267","severity":1,"message":"299","line":30,"column":10,"nodeType":"269","messageId":"270","endLine":30,"endColumn":19},{"ruleId":"267","severity":1,"message":"300","line":31,"column":10,"nodeType":"269","messageId":"270","endLine":31,"endColumn":25},{"ruleId":"267","severity":1,"message":"301","line":32,"column":10,"nodeType":"269","messageId":"270","endLine":32,"endColumn":22},{"ruleId":"267","severity":1,"message":"302","line":32,"column":24,"nodeType":"269","messageId":"270","endLine":32,"endColumn":39},{"ruleId":"267","severity":1,"message":"299","line":98,"column":10,"nodeType":"269","messageId":"270","endLine":98,"endColumn":19},{"ruleId":"267","severity":1,"message":"300","line":99,"column":10,"nodeType":"269","messageId":"270","endLine":99,"endColumn":25},{"ruleId":"267","severity":1,"message":"301","line":100,"column":10,"nodeType":"269","messageId":"270","endLine":100,"endColumn":22},{"ruleId":"267","severity":1,"message":"302","line":100,"column":24,"nodeType":"269","messageId":"270","endLine":100,"endColumn":39},{"ruleId":"267","severity":1,"message":"303","line":5,"column":10,"nodeType":"269","messageId":"270","endLine":5,"endColumn":20},{"ruleId":"267","severity":1,"message":"304","line":42,"column":9,"nodeType":"269","messageId":"270","endLine":42,"endColumn":17},{"ruleId":"267","severity":1,"message":"288","line":1,"column":17,"nodeType":"269","messageId":"270","endLine":1,"endColumn":25},{"ruleId":"267","severity":1,"message":"305","line":3,"column":10,"nodeType":"269","messageId":"270","endLine":3,"endColumn":19},{"ruleId":"267","severity":1,"message":"287","line":1,"column":8,"nodeType":"269","messageId":"270","endLine":1,"endColumn":13},{"ruleId":"267","severity":1,"message":"287","line":1,"column":8,"nodeType":"269","messageId":"270","endLine":1,"endColumn":13},{"ruleId":"267","severity":1,"message":"306","line":8,"column":3,"nodeType":"269","messageId":"270","endLine":8,"endColumn":17},{"ruleId":"267","severity":1,"message":"307","line":59,"column":51,"nodeType":"269","messageId":"270","endLine":59,"endColumn":65},{"ruleId":"277","severity":1,"message":"308","line":75,"column":6,"nodeType":"279","endLine":75,"endColumn":32,"suggestions":"309"},{"ruleId":"267","severity":1,"message":"310","line":9,"column":10,"nodeType":"269","messageId":"270","endLine":9,"endColumn":16},{"ruleId":"277","severity":1,"message":"311","line":90,"column":17,"nodeType":"312","endLine":90,"endColumn":21},{"ruleId":"267","severity":1,"message":"313","line":4,"column":10,"nodeType":"269","messageId":"270","endLine":4,"endColumn":20},{"ruleId":"267","severity":1,"message":"314","line":7,"column":3,"nodeType":"269","messageId":"270","endLine":7,"endColumn":17},{"ruleId":"267","severity":1,"message":"315","line":8,"column":3,"nodeType":"269","messageId":"270","endLine":8,"endColumn":16},{"ruleId":"267","severity":1,"message":"284","line":11,"column":10,"nodeType":"269","messageId":"270","endLine":11,"endColumn":27},{"ruleId":"267","severity":1,"message":"306","line":12,"column":10,"nodeType":"269","messageId":"270","endLine":12,"endColumn":24},{"ruleId":"267","severity":1,"message":"316","line":13,"column":10,"nodeType":"269","messageId":"270","endLine":13,"endColumn":24},{"ruleId":"267","severity":1,"message":"317","line":13,"column":26,"nodeType":"269","messageId":"270","endLine":13,"endColumn":30},{"ruleId":"267","severity":1,"message":"304","line":65,"column":9,"nodeType":"269","messageId":"270","endLine":65,"endColumn":17},{"ruleId":"267","severity":1,"message":"292","line":5,"column":3,"nodeType":"269","messageId":"270","endLine":5,"endColumn":13},{"ruleId":"267","severity":1,"message":"318","line":6,"column":3,"nodeType":"269","messageId":"270","endLine":6,"endColumn":25},{"ruleId":"267","severity":1,"message":"304","line":37,"column":9,"nodeType":"269","messageId":"270","endLine":37,"endColumn":17},{"ruleId":"267","severity":1,"message":"319","line":56,"column":7,"nodeType":"269","messageId":"270","endLine":56,"endColumn":17},{"ruleId":"267","severity":1,"message":"306","line":11,"column":3,"nodeType":"269","messageId":"270","endLine":11,"endColumn":17},{"ruleId":"267","severity":1,"message":"320","line":30,"column":7,"nodeType":"269","messageId":"270","endLine":30,"endColumn":16},{"ruleId":"277","severity":1,"message":"308","line":274,"column":6,"nodeType":"279","endLine":274,"endColumn":31,"suggestions":"321"},{"ruleId":"267","severity":1,"message":"322","line":4,"column":10,"nodeType":"269","messageId":"270","endLine":4,"endColumn":24},{"ruleId":"277","severity":1,"message":"323","line":59,"column":6,"nodeType":"279","endLine":59,"endColumn":13,"suggestions":"324"},"@typescript-eslint/no-unused-vars","'userInfo' is defined but never used.","Identifier","unusedVar","'RootState' is defined but never used.","'current' is defined but never used.","'WritableDraft' is defined but never used.","'DefaultEventsMap' is defined but never used.","'UserPage' is defined but never used.","'PrivateRoute' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchUserInfo'. Either include it or remove the dependency array.","ArrayExpression",["325"],"'AxiosInstance' is defined but never used.","'AxiosResponse' is defined but never used.","'Axios' is defined but never used.","'showWithComponent' is defined but never used.","'NavLink' is defined but never used.","'withCondition' is defined but never used.","'React' is defined but never used.","'useState' is defined but never used.","'styled' is defined but never used.","'RootModal' is defined but never used.","'stat' is defined but never used.","'MatchState' is defined but never used.","'myRoom' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'getIOConnection'. Either include them or remove the dependency array.",["326"],"'errorMonitor' is defined but never used.","'FormLink' is defined but never used.","'FormLinkContainer' is defined but never used.","'isLoading' is assigned a value but never used.","'validationError' is assigned a value but never used.","'requestError' is assigned a value but never used.","'setRequestError' is assigned a value but never used.","'addMessage' is defined but never used.","'dispatch' is assigned a value but never used.","'useSocket' is defined but never used.","'setActiveTimer' is defined but never used.","'matchMoveTimer' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["327"],"'Player' is defined but never used.","Assignments to the 'isMounted' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'ErrorModal' is defined but never used.","'setCurrentRoom' is defined but never used.","'setMatchState' is defined but never used.","'JoinRoomResult' is defined but never used.","'Room' is defined but never used.","'setMatchStateAfterMove' is defined but never used.","'RoomAmount' is assigned a value but never used.","'RoomOwner' is assigned a value but never used.",["328"],"'useAppDispatch' is defined but never used.","React Hook useEffect has a missing dependency: 'isLastMove'. Either include it or remove the dependency array.",["329"],{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},"Update the dependencies array to be: [fetchUserInfo]",{"range":"340","text":"341"},"Update the dependencies array to be: [dispatch, getIOConnection]",{"range":"342","text":"343"},"Update the dependencies array to be: [dispatch, matchStartTimer.isActive]",{"range":"344","text":"345"},"Update the dependencies array to be: [dispatch, matchMoveTimer.isActive]",{"range":"346","text":"347"},"Update the dependencies array to be: [isLastMove, value]",{"range":"348","text":"349"},[1345,1347],"[fetchUserInfo]",[6815,6817],"[dispatch, getIOConnection]",[2051,2077],"[dispatch, matchStartTimer.isActive]",[6472,6497],"[dispatch, matchMoveTimer.isActive]",[1343,1350],"[isLastMove, value]"]